"use client";
import React from "react";

function MainComponent() {
  const { data: user } = useUser();
  const [activeSection, setActiveSection] = useState("payment");
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [preferences, setPreferences] = useState({
    defaultPaymentMethodId: null,
    autoRenewDomains: false,
    paymentReminderDays: 7,
  });

  useEffect(() => {
    const loadPreferences = async () => {
      try {
        const response = await fetch("/api/update-payment-preferences", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error("Failed to load preferences");
        }

        const data = await response.json();
        if (data.success) {
          setPreferences({
            defaultPaymentMethodId: data.preferences.defaultPaymentMethodId,
            autoRenewDomains: data.preferences.autoRenewDomains,
            paymentReminderDays: data.preferences.paymentReminderDays,
          });
        } else {
          throw new Error(data.message || "Failed to load preferences");
        }
      } catch (err) {
        setError("Could not load your payment preferences. Please try again.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
  }, []);

  const handlePaymentSave = async (formData) => {
    setSaving(true);
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch("/api/update-payment-preferences", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to update preferences");
      }

      if (data.success) {
        setPreferences({
          defaultPaymentMethodId: data.preferences.defaultPaymentMethodId,
          autoRenewDomains: data.preferences.autoRenewDomains,
          paymentReminderDays: data.preferences.paymentReminderDays,
        });
        setSuccess("Your payment preferences have been updated");

        setTimeout(() => {
          setSuccess(null);
        }, 3000);
      } else {
        throw new Error(data.message || "Failed to update preferences");
      }
    } catch (err) {
      setError("Could not save your payment preferences. Please try again.");
      console.error(err);
    } finally {
      setSaving(false);
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4 flex items-center justify-center">
        <div className="text-gray-600">
          Please sign in to access account settings
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4 flex items-center justify-center">
        <div className="flex flex-col items-center gap-3">
          <i className="fas fa-spinner fa-spin text-2xl text-gray-600"></i>
          <div className="text-gray-600">Loading your preferences...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-8">Account Settings</h1>

      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Profile</h2>
        <div id="985315c4-ad21-45af-834e-fc36b4ad7fa3"></div>
      </div>

      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Payment Settings</h2>
        <div className="bg-white rounded-2xl shadow-xl p-6">
          <PaymentPreferencesForm
            defaultPaymentMethodId={preferences.defaultPaymentMethodId}
            autoRenewDomains={preferences.autoRenewDomains}
            paymentReminderDays={preferences.paymentReminderDays}
            onSubmit={handlePaymentSave}
            loading={saving}
            error={error}
          />

          {success && (
            <div className="mt-4 p-3 bg-green-50 text-green-500 rounded-lg flex items-center gap-2">
              <i className="fas fa-check-circle"></i>
              <span>{success}</span>
            </div>
          )}
        </div>
      </div>

      <div className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Banking Details</h2>
        <div id="f856ccde-9a19-43d1-ad5b-2aa871e92ef4"></div>
      </div>

      <div>
        <h2 className="text-xl font-semibold mb-4">Notifications</h2>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const [activeTab, setActiveTab] = useState("value");
  const [domainName, setDomainName] = useState("");
  const [extension, setExtension] = useState(".com");
  const [bulkDomains, setBulkDomains] = useState("");
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const analyzeDomain = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch("/api/analyze-domain-value", {
        method: "POST",
        body: JSON.stringify({ domainName: domainName + extension }),
      });
      if (!response.ok) {
        throw new Error("Failed to analyze domain");
      }
      const data = await response.json();
      setResults(data);
    } catch (err) {
      setError("Could not analyze domain value");
      console.error(err);
    }
    setLoading(false);
  };

  const optimizePricing = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch("/api/optimize-pricing", {
        method: "POST",
        body: JSON.stringify({ domainName, extension }),
      });
      if (!response.ok) {
        throw new Error("Failed to optimize pricing");
      }
      const data = await response.json();
      setResults(data);
    } catch (err) {
      setError("Could not optimize pricing");
      console.error(err);
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-gray-800 mb-8 font-roboto">
          Domain Tools
        </h1>

        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="flex space-x-4 mb-6">
            <button
              onClick={() => setActiveTab("value")}
              className={`px-4 py-2 rounded-lg font-medium ${
                activeTab === "value"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-100 text-gray-700"
              }`}
            >
              Value Estimator
            </button>
            <button
              onClick={() => setActiveTab("bulk")}
              className={`px-4 py-2 rounded-lg font-medium ${
                activeTab === "bulk"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-100 text-gray-700"
              }`}
            >
              Bulk Checker
            </button>
            <button
              onClick={() => setActiveTab("optimize")}
              className={`px-4 py-2 rounded-lg font-medium ${
                activeTab === "optimize"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-100 text-gray-700"
              }`}
            >
              Price Optimizer
            </button>
          </div>

          {activeTab === "value" && (
            <div className="space-y-4">
              <div className="flex space-x-4">
                <input
                  type="text"
                  placeholder="Enter domain name"
                  className="flex-1 p-2 border rounded"
                  value={domainName}
                  onChange={(e) => setDomainName(e.target.value)}
                />
                <select
                  className="p-2 border rounded"
                  value={extension}
                  onChange={(e) => setExtension(e.target.value)}
                >
                  <option value=".com">.com</option>
                  <option value=".net">.net</option>
                  <option value=".org">.org</option>
                </select>
                <button
                  onClick={analyzeDomain}
                  disabled={loading}
                  className="px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
                >
                  {loading ? "Analyzing..." : "Analyze"}
                </button>
              </div>
            </div>
          )}

          {activeTab === "bulk" && (
            <div className="space-y-4">
              <textarea
                placeholder="Enter multiple domains (one per line)"
                className="w-full h-40 p-2 border rounded"
                value={bulkDomains}
                onChange={(e) => setBulkDomains(e.target.value)}
              />
              <button className="px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                Check Domains
              </button>
            </div>
          )}

          {activeTab === "optimize" && (
            <div className="space-y-4">
              <div className="flex space-x-4">
                <input
                  type="text"
                  placeholder="Enter domain name"
                  className="flex-1 p-2 border rounded"
                  value={domainName}
                  onChange={(e) => setDomainName(e.target.value)}
                />
                <select
                  className="p-2 border rounded"
                  value={extension}
                  onChange={(e) => setExtension(e.target.value)}
                >
                  <option value=".com">.com</option>
                  <option value=".net">.net</option>
                  <option value=".org">.org</option>
                </select>
                <button
                  onClick={optimizePricing}
                  disabled={loading}
                  className="px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
                >
                  {loading ? "Optimizing..." : "Optimize Price"}
                </button>
              </div>
            </div>
          )}

          {error && (
            <div className="mt-4 p-4 bg-red-100 text-red-700 rounded">
              {error}
            </div>
          )}

          {results && (
            <div className="mt-6 p-4 bg-gray-50 rounded">
              <pre className="whitespace-pre-wrap">
                {JSON.stringify(results, null, 2)}
              </pre>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default MainComponent;"use client";
import React from "react";

function MainComponent() {
  const [dateRange, setDateRange] = useState({
    start: "2023-01-01",
    end: "2023-12-31",
  });
  const [groupBy, setGroupBy] = useState("month");
  const [reportData, setReportData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchReport = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch("/api/generate-profit-report", {
        method: "POST",
        body: JSON.stringify({
          startDate: dateRange.start,
          endDate: dateRange.end,
          groupBy,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch report");
      }

      const data = await response.json();
      setReportData(data);
    } catch (err) {
      console.error(err);
      setError("Could not load the profit report");
    } finally {
      setLoading(false);
    }
  }, [dateRange, groupBy]);

  useEffect(() => {
    fetchReport();
  }, [fetchReport]);

  const exportToCSV = () => {
    if (!reportData) return;

    const csvContent =
      `data:text/csv;charset=utf-8,Period,Revenue,Costs,Profit,Transactions\n` +
      Object.entries(reportData.detailedReport)
        .map(
          ([period, data]) =>
            `${period},${data.periodTotals.revenue},${data.periodTotals.costs},${data.periodTotals.profit},${data.periodTotals.transactions}`
        )
        .join("\n");

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute(
      "download",
      `profit-report-${dateRange.start}-${dateRange.end}.csv`
    );
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="animate-pulse text-center text-gray-500">
          Loading your profit data...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="text-red-500 text-center">{error}</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto space-y-6">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-gray-800">
              Profit Dashboard
            </h1>
            <div className="flex gap-4">
              <select
                value={groupBy}
                onChange={(e) => setGroupBy(e.target.value)}
                className="rounded border p-2"
              >
                <option value="month">Monthly</option>
                <option value="year">Yearly</option>
              </select>
              <button
                onClick={exportToCSV}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              >
                Export Report
              </button>
            </div>
          </div>

          {reportData && (
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="text-sm text-green-600">Total Revenue</div>
                <div className="text-2xl font-bold">
                  ${reportData.summary.totalRevenue.toLocaleString()}
                </div>
              </div>
              <div className="bg-red-50 p-4 rounded-lg">
                <div className="text-sm text-red-600">Total Costs</div>
                <div className="text-2xl font-bold">
                  ${reportData.summary.totalCosts.toLocaleString()}
                </div>
              </div>
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="text-sm text-blue-600">Total Profit</div>
                <div className="text-2xl font-bold">
                  ${reportData.summary.totalProfit.toLocaleString()}
                </div>
              </div>
              <div className="bg-purple-50 p-4 rounded-lg">
                <div className="text-sm text-purple-600">Profit Margin</div>
                <div className="text-2xl font-bold">
                  {reportData.summary.overallMargin}%
                </div>
              </div>
            </div>
          )}

          {reportData && (
            <div className="space-y-6">
              <div className="bg-white rounded-lg p-4">
                <h2 className="text-xl font-semibold mb-4">Period Breakdown</h2>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left p-2">Period</th>
                        <th className="text-right p-2">Revenue</th>
                        <th className="text-right p-2">Costs</th>
                        <th className="text-right p-2">Profit</th>
                        <th className="text-right p-2">Margin</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Object.entries(reportData.detailedReport).map(
                        ([period, data]) => (
                          <tr
                            key={period}
                            className="border-b hover:bg-gray-50"
                          >
                            <td className="p-2">{period}</td>
                            <td className="text-right p-2">
                              ${data.periodTotals.revenue.toLocaleString()}
                            </td>
                            <td className="text-right p-2">
                              ${data.periodTotals.costs.toLocaleString()}
                            </td>
                            <td className="text-right p-2">
                              ${data.periodTotals.profit.toLocaleString()}
                            </td>
                            <td className="text-right p-2">
                              {(
                                (data.periodTotals.profit /
                                  data.periodTotals.revenue) *
                                100
                              ).toFixed(2)}
                              %
                            </td>
                          </tr>
                        )
                      )}
                    </tbody>
                  </table>
                </div>
              </div>

              <div className="bg-white rounded-lg p-4">
                <h2 className="text-xl font-semibold mb-4">
                  Extension Breakdown
                </h2>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left p-2">Extension</th>
                        <th className="text-right p-2">Revenue</th>
                        <th className="text-right p-2">Profit</th>
                        <th className="text-right p-2">Transactions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Object.entries(reportData.detailedReport).map(
                        ([period, data]) =>
                          Object.entries(data.extensions).map(
                            ([ext, extData]) => (
                              <tr
                                key={`${period}-${ext}`}
                                className="border-b hover:bg-gray-50"
                              >
                                <td className="p-2">{ext}</td>
                                <td className="text-right p-2">
                                  ${extData.revenue.toLocaleString()}
                                </td>
                                <td className="text-right p-2">
                                  ${extData.profit.toLocaleString()}
                                </td>
                                <td className="text-right p-2">
                                  {extData.transactions}
                                </td>
                              </tr>
                            )
                          )
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-xl shadow-sm p-8">
          <h1 className="text-3xl font-bold text-gray-900 font-inter mb-8">
            Privacy Policy
          </h1>

          <div className="space-y-8">
            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                1. Information We Collect
              </h2>
              <div className="space-y-4 text-gray-600 font-inter">
                <p>
                  We collect information that you provide directly to us,
                  including:
                </p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>Name, email address, and contact information</li>
                  <li>
                    Payment and billing information including credit card
                    details
                  </li>
                  <li>Domain registration details and ownership information</li>
                  <li>Account credentials and authentication data</li>
                  <li>Communications and correspondence with our team</li>
                  <li>Device information and IP addresses</li>
                  <li>Usage data and browsing patterns</li>
                  <li>Location data when enabled</li>
                </ul>
              </div>
            </section>
            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                2. How We Use Your Information
              </h2>
              <div className="space-y-4 text-gray-600 font-inter">
                <p>We use the information we collect to:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>Process domain registrations and related transactions</li>
                  <li>Provide customer support and respond to inquiries</li>
                  <li>Send important service notices and updates</li>
                  <li>Improve our services and develop new features</li>
                  <li>Protect against fraud and unauthorized access</li>
                  <li>Analyze usage patterns and optimize user experience</li>
                  <li>Comply with legal obligations and industry standards</li>
                  <li>Personalize your experience on our platform</li>
                </ul>
              </div>
            </section>

            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                3. Information Sharing
              </h2>
              <div className="space-y-4 text-gray-600 font-inter">
                <p>We may share your information with:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    Domain registries and registrars for domain registration
                  </li>
                  <li>
                    Payment processors and financial institutions for
                    transaction processing
                  </li>
                  <li>
                    Service providers who assist in our operations under strict
                    confidentiality agreements
                  </li>
                  <li>
                    Law enforcement when required by law or to protect our
                    rights
                  </li>
                  <li>Business partners with your explicit consent</li>
                  <li>
                    Third-party analytics providers to improve our services
                  </li>
                </ul>
                <p className="mt-4">
                  We do not sell your personal information to third parties for
                  marketing purposes.
                </p>
              </div>
            </section>

            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                4. Data Security
              </h2>
              <p className="text-gray-600 font-inter">
                We implement appropriate technical and organizational measures
                to protect your personal information against unauthorized
                access, alteration, disclosure, or destruction.
              </p>
            </section>

            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                5. Your Rights
              </h2>
              <div className="space-y-4 text-gray-600 font-inter">
                <p>
                  Under applicable data protection laws, you have the right to:
                </p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>
                    Access and receive a copy of your personal information
                  </li>
                  <li>Correct or update inaccurate information</li>
                  <li>
                    Request deletion of your information (right to be forgotten)
                  </li>
                  <li>Opt-out of marketing communications and newsletters</li>
                  <li>Object to certain data processing activities</li>
                  <li>
                    Data portability - receive your data in a structured format
                  </li>
                  <li>
                    Withdraw consent at any time for consent-based processing
                  </li>
                  <li>Lodge a complaint with a supervisory authority</li>
                </ul>
              </div>
            </section>
            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                6. Cookies and Tracking
              </h2>
              <div className="space-y-4 text-gray-600 font-inter">
                <p>We use cookies and similar technologies to:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>Remember your preferences and settings</li>
                  <li>Understand how you interact with our services</li>
                  <li>Provide secure authentication</li>
                  <li>Analyze site traffic and performance</li>
                  <li>Deliver relevant content and advertisements</li>
                </ul>
                <p className="mt-4">
                  You can control cookie preferences through your browser
                  settings. Note that disabling certain cookies may limit
                  functionality.
                </p>
              </div>
            </section>

            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                7. Changes to This Policy
              </h2>
              <p className="text-gray-600 font-inter">
                We may update this privacy policy from time to time. We will
                notify you of any material changes by email or through our
                platform before they become effective.
              </p>
            </section>
            <section>
              <h2 className="text-xl font-semibold text-gray-900 font-inter mb-4">
                8. Contact Us
              </h2>
              <p className="text-gray-600 font-inter">
                For any privacy-related concerns or to exercise your rights,
                please contact our Data Protection Officer at:
              </p>
              <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                <p className="text-gray-600 font-inter">
                  Email: privacy@example.com
                </p>
                <p className="text-gray-600 font-inter">
                  Phone: 1-800-123-4567
                </p>
                <p className="text-gray-600 font-inter">
                  Address: 123 Privacy Street, Data City, ST 12345
                </p>
                <p className="text-gray-600 font-inter">
                  Response Time: Within 48 hours
                </p>
              </div>
            </section>
            <div className="border-t border-gray-200 pt-8 mt-8">
              <p className="text-sm text-gray-500 font-inter">
                Last updated: January 1, 2025
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const { data: user } = useUser();
  const currentYear = 2025;

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-sm p-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 font-inter mb-2">
            Terms of Service
          </h1>
          <p className="text-gray-500 font-inter">
            Last updated: January 1, {currentYear}
          </p>
        </div>

        <div className="space-y-8 font-inter">
          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              1. Acceptance of Terms
            </h2>
            <p className="text-gray-600 leading-relaxed">
              By accessing and using our services, you agree to be bound by
              these Terms of Service and all applicable laws and regulations. If
              you do not agree with any of these terms, you are prohibited from
              using this service.
            </p>
          </section>

          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              2. Domain Registration and Management
            </h2>
            <div className="space-y-4 text-gray-600 leading-relaxed">
              <p>
                2.1. You agree to provide accurate and complete information
                during the domain registration process.
              </p>
              <p>
                2.2. Domain registrations are on a first-come, first-served
                basis.
              </p>
              <p>
                2.3. You are responsible for maintaining and renewing your
                domain registrations.
              </p>
              <p>
                2.4. We comply with ICANN policies and procedures for domain
                transfers and disputes.
              </p>
              <p>
                2.5. Domain registration fees are non-refundable unless required
                by law.
              </p>
              <p>
                2.6. We reserve the right to suspend or cancel registrations
                that violate these terms.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              3. Payment Processing
            </h2>
            <div className="space-y-4 text-gray-600 leading-relaxed">
              <p>
                3.1. All payments must be made through our approved payment
                methods.
              </p>
              <p>
                3.2. You agree to provide valid and authorized payment
                information.
              </p>
              <p>
                3.3. Recurring payments will be automatically processed for
                renewal services.
              </p>
              <p>
                3.4. Failed payments may result in service suspension or
                termination.
              </p>
              <p>
                3.5. Refunds are subject to our refund policy and applicable
                laws.
              </p>
              <p>
                3.6. We use industry-standard security measures to protect
                payment information.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              4. User Responsibilities
            </h2>
            <div className="space-y-4 text-gray-600 leading-relaxed">
              <p>
                4.1. You must maintain accurate contact and billing information.
              </p>
              <p>
                4.2. You are responsible for all activity under your account.
              </p>
              <p>
                4.3. You agree not to use our services for illegal or
                unauthorized purposes.
              </p>
              <p>
                4.4. You must comply with all applicable laws and regulations.
              </p>
              <p>
                4.5. You will not infringe on others' intellectual property
                rights.
              </p>
              <p>4.6. You must maintain secure account credentials.</p>
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              5. Service Limitations
            </h2>
            <div className="space-y-4 text-gray-600 leading-relaxed">
              <p>
                5.1. Services are provided "as is" without warranties of any
                kind.
              </p>
              <p>
                5.2. We may modify, suspend, or discontinue services at any
                time.
              </p>
              <p>
                5.3. We are not responsible for service interruptions beyond our
                control.
              </p>
              <p>5.4. We may impose usage limits or restrictions as needed.</p>
              <p>
                5.5. Third-party services are subject to their own terms and
                conditions.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              6. Dispute Resolution
            </h2>
            <div className="space-y-4 text-gray-600 leading-relaxed">
              <p>
                6.1. All disputes will first be attempted to be resolved through
                informal negotiation.
              </p>
              <p>
                6.2. Unresolved disputes will be subject to binding arbitration.
              </p>
              <p>
                6.3. Arbitration will be conducted in accordance with applicable
                laws.
              </p>
              <p>
                6.4. Class action lawsuits and class-wide arbitration are not
                permitted.
              </p>
              <p>
                6.5. You retain the right to bring claims in small claims court.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              7. Limitation of Liability
            </h2>
            <div className="space-y-4 text-gray-600 leading-relaxed">
              <p>
                7.1. We are not liable for indirect, consequential, or
                incidental damages.
              </p>
              <p>
                7.2. Our total liability is limited to the amount paid for
                services.
              </p>
              <p>
                7.3. Some jurisdictions do not allow liability limitations, so
                these may not apply.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              8. Changes to Terms
            </h2>
            <div className="space-y-4 text-gray-600 leading-relaxed">
              <p>
                8.1. We reserve the right to modify these terms at any time.
              </p>
              <p>8.2. Changes will be effective upon posting to our website.</p>
              <p>
                8.3. Continued use of services constitutes acceptance of
                modified terms.
              </p>
            </div>
          </section>

          <div className="mt-12 pt-8 border-t border-gray-200">
            <p className="text-gray-500 text-sm">
              For questions about these terms, please contact our support team
              at{" "}
              <a href="/support" className="text-[#357AFF] hover:underline">
                support center
              </a>
              .
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const [activeSection, setActiveSection] = useState("faq");
  const [searchQuery, setSearchQuery] = useState("");
  const [contactForm, setContactForm] = useState({
    name: "",
    email: "",
    subject: "",
    message: "",
  });
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState(null);
  const [showChat, setShowChat] = useState(false);
  const [articles, setArticles] = useState([]);
  const [searchResults, setSearchResults] = useState([]);

  useEffect(() => {
    fetchHelpArticles();
  }, [activeSection]);

  useEffect(() => {
    const filtered = articles.filter(
      (article) =>
        article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        article.content.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setSearchResults(filtered);
  }, [searchQuery, articles]);

  const fetchHelpArticles = async () => {
    try {
      const response = await fetch("/api/get-help-articles", {
        method: "POST",
        body: JSON.stringify({
          category: activeSection,
          limit: 10,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch articles");
      }

      const data = await response.json();
      setArticles(data.articles);
    } catch (err) {
      console.error("Error fetching articles:", err);
      setError("Failed to load help articles");
    }
  };

  const handleContactSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      const response = await fetch("/api/submit-contact-form", {
        method: "POST",
        body: JSON.stringify(contactForm),
      });

      if (!response.ok) {
        throw new Error("Failed to submit form");
      }

      setSuccess(true);
      setContactForm({ name: "", email: "", subject: "", message: "" });
    } catch (err) {
      console.error("Error submitting form:", err);
      setError("Failed to send message. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setContactForm((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-5xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 font-inter mb-4">
            How can we help?
          </h1>
          <div className="max-w-2xl mx-auto relative">
            <input
              type="text"
              placeholder="Search for help..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-6 py-4 rounded-full border border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#357AFF] font-inter"
            />
            <i className="fas fa-search absolute right-6 top-1/2 -translate-y-1/2 text-gray-400"></i>
          </div>
        </div>
        <div className="flex flex-wrap gap-4 mb-8 justify-center">
          {["faq", "domains", "billing", "contact"].map((section) => (
            <button
              key={section}
              onClick={() => setActiveSection(section)}
              className={`px-6 py-3 rounded-full font-inter ${
                activeSection === section
                  ? "bg-[#357AFF] text-white"
                  : "bg-white text-gray-600 hover:bg-gray-50"
              }`}
            >
              {section === "faq" && (
                <i className="fas fa-question-circle mr-2"></i>
              )}
              {section === "domains" && <i className="fas fa-globe mr-2"></i>}
              {section === "billing" && (
                <i className="fas fa-credit-card mr-2"></i>
              )}
              {section === "contact" && (
                <i className="fas fa-envelope mr-2"></i>
              )}
              {section.charAt(0).toUpperCase() + section.slice(1)}
            </button>
          ))}
        </div>

        <div className="bg-white rounded-2xl shadow-sm p-8">
          {activeSection === "faq" && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-gray-900 font-inter mb-6">
                Frequently Asked Questions
              </h2>
              <div className="space-y-4">
                {(searchQuery ? searchResults : articles).map(
                  (article, index) => (
                    <div
                      key={index}
                      className="border border-gray-100 rounded-xl p-6"
                    >
                      <h3 className="font-medium text-gray-900 font-inter mb-2">
                        {article.title}
                      </h3>
                      <p className="text-gray-600 font-inter">
                        {article.content}
                      </p>
                    </div>
                  )
                )}
                {(searchQuery
                  ? searchResults.length === 0
                  : articles.length === 0) && (
                  <div className="text-center text-gray-500 py-8">
                    {error || "No articles found"}
                  </div>
                )}
              </div>
            </div>
          )}

          {activeSection === "domains" && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-gray-900 font-inter mb-6">
                Domain Management Guides
              </h2>
              <div className="grid md:grid-cols-2 gap-6">
                {[
                  {
                    title: "Domain Transfer Guide",
                    desc: "Learn how to transfer your domain between registrars",
                  },
                  {
                    title: "DNS Management",
                    desc: "Configure your domain's DNS settings",
                  },
                  {
                    title: "Domain Privacy",
                    desc: "Protect your personal information with domain privacy",
                  },
                  {
                    title: "Auto-Renewal",
                    desc: "Set up automatic domain renewal",
                  },
                ].map((guide, index) => (
                  <div
                    key={index}
                    className="border border-gray-100 rounded-xl p-6 hover:border-[#357AFF] transition-colors"
                  >
                    <h3 className="font-medium text-gray-900 font-inter mb-2">
                      {guide.title}
                    </h3>
                    <p className="text-gray-600 font-inter">{guide.desc}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeSection === "billing" && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-gray-900 font-inter mb-6">
                Payment & Billing FAQ
              </h2>
              <div className="space-y-4">
                {[
                  {
                    q: "How do I update my payment method?",
                    a: "You can update your payment method in your account settings under the 'Payment Methods' section.",
                  },
                  {
                    q: "When will I be billed for domain renewal?",
                    a: "Domain renewal charges occur 30 days before the expiration date if auto-renewal is enabled.",
                  },
                  {
                    q: "What happens if my payment fails?",
                    a: "We'll notify you immediately and retry the payment. You can also manually update your payment information.",
                  },
                ].map((item, index) => (
                  <div
                    key={index}
                    className="border border-gray-100 rounded-xl p-6"
                  >
                    <h3 className="font-medium text-gray-900 font-inter mb-2">
                      {item.q}
                    </h3>
                    <p className="text-gray-600 font-inter">{item.a}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeSection === "contact" && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-gray-900 font-inter mb-6">
                Contact Support
              </h2>
              <form onSubmit={handleContactSubmit} className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1 font-inter">
                      Name
                    </label>
                    <input
                      type="text"
                      name="name"
                      value={contactForm.name}
                      onChange={handleInputChange}
                      className="w-full rounded-lg border border-gray-200 p-3 font-inter"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1 font-inter">
                      Email
                    </label>
                    <input
                      type="email"
                      name="email"
                      value={contactForm.email}
                      onChange={handleInputChange}
                      className="w-full rounded-lg border border-gray-200 p-3 font-inter"
                      required
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1 font-inter">
                    Subject
                  </label>
                  <input
                    type="text"
                    name="subject"
                    value={contactForm.subject}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3 font-inter"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1 font-inter">
                    Message
                  </label>
                  <textarea
                    name="message"
                    value={contactForm.message}
                    onChange={handleInputChange}
                    rows="4"
                    className="w-full rounded-lg border border-gray-200 p-3 font-inter"
                    required
                  ></textarea>
                </div>
                {error && (
                  <div className="text-red-500 font-inter">
                    <i className="fas fa-exclamation-circle mr-2"></i>
                    {error}
                  </div>
                )}
                {success && (
                  <div className="text-green-500 font-inter">
                    <i className="fas fa-check-circle mr-2"></i>
                    Message sent successfully! We'll get back to you soon.
                  </div>
                )}
                <button
                  type="submit"
                  disabled={loading}
                  className="w-full bg-[#357AFF] text-white py-3 rounded-lg hover:bg-[#2E69DE] transition-colors font-inter disabled:opacity-50"
                >
                  {loading ? "Sending..." : "Send Message"}
                </button>
              </form>
            </div>
          )}
        </div>

        <div className="fixed bottom-8 right-8">
          <button className="bg-[#357AFF] text-white p-4 rounded-full shadow-lg hover:bg-[#2E69DE] transition-colors">
            <i className="fas fa-comments text-xl"></i>
          </button>
        </div>

        <div className="fixed bottom-8 right-8 z-50">
          <div
            className={`bg-white rounded-lg shadow-lg p-4 mb-4 w-[300px] ${
              showChat ? "" : "hidden"
            }`}
          >
            <div className="flex justify-between items-center mb-4">
              <h3 className="font-medium text-gray-900">Live Chat</h3>
              <button
                onClick={() => setShowChat(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
            <div className="h-[300px] overflow-y-auto border-y border-gray-100 p-4 mb-4">
              <div className="text-center text-gray-500">
                Live chat coming soon!
              </div>
            </div>
          </div>
          <button
            onClick={() => setShowChat(!showChat)}
            className="bg-[#357AFF] text-white p-4 rounded-full shadow-lg hover:bg-[#2E69DE] transition-colors"
          >
            <i className="fas fa-comments text-xl"></i>
          </button>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const { data: user, loading: userLoading, refetch } = useUser();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
    emailNotifications: true,
    smsNotifications: false,
  });

  useEffect(() => {
    if (user) {
      setFormData((prev) => ({
        ...prev,
        name: user.name || "",
        email: user.email || "",
        emailNotifications: user.notificationPreferences?.email || true,
        smsNotifications: user.notificationPreferences?.sms || false,
      }));
    }
  }, [user]);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch("/api/update-profile", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: formData.name,
          email: formData.email,
          notificationPreferences: {
            email: formData.emailNotifications,
            sms: formData.smsNotifications,
          },
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to update profile");
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      await refetch();
      setSuccess("Profile updated successfully");

      if (formData.currentPassword && formData.newPassword) {
        if (formData.newPassword !== formData.confirmPassword) {
          setError("New passwords do not match");
          return;
        }

        const passwordResponse = await fetch("/api/update-profile", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            currentPassword: formData.currentPassword,
            newPassword: formData.newPassword,
          }),
        });

        if (!passwordResponse.ok) {
          throw new Error("Failed to update password");
        }

        const passwordData = await passwordResponse.json();

        if (passwordData.error) {
          throw new Error(passwordData.error);
        }

        setFormData((prev) => ({
          ...prev,
          currentPassword: "",
          newPassword: "",
          confirmPassword: "",
        }));

        setSuccess("Profile and password updated successfully");
      }
    } catch (err) {
      setError(err.message || "Failed to update profile");
    } finally {
      setLoading(false);
    }
  };

  if (userLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-500">
          <i className="fas fa-spinner fa-spin text-2xl"></i>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 mb-4">
            Please sign in to view your profile
          </p>
          <a
            href="/account/signin?callbackUrl=/account/profile"
            className="bg-[#357AFF] text-white px-6 py-2 rounded-lg hover:bg-[#2E69DE] transition-colors"
          >
            Sign In
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Profile Settings
            </h1>
            <p className="text-gray-500 mt-1">
              Manage your account information and preferences
            </p>
          </div>
          <div className="flex items-center gap-2">
            <span
              className={`px-3 py-1 rounded-full text-sm ${
                user.status === "active"
                  ? "bg-green-100 text-green-700"
                  : "bg-yellow-100 text-yellow-700"
              }`}
            >
              {user.status === "active"
                ? "Active Account"
                : "Pending Verification"}
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="md:col-span-2">
            <form
              onSubmit={handleSubmit}
              className="bg-white rounded-xl shadow-sm p-6"
            >
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Name
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email
                  </label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </div>
                <div className="border-t border-gray-200 pt-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Change Password
                  </h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Current Password
                      </label>
                      <input
                        type="password"
                        name="currentPassword"
                        value={formData.currentPassword}
                        onChange={handleInputChange}
                        className="w-full rounded-lg border border-gray-200 p-3"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        New Password
                      </label>
                      <input
                        type="password"
                        name="newPassword"
                        value={formData.newPassword}
                        onChange={handleInputChange}
                        className="w-full rounded-lg border border-gray-200 p-3"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Confirm New Password
                      </label>
                      <input
                        type="password"
                        name="confirmPassword"
                        value={formData.confirmPassword}
                        onChange={handleInputChange}
                        className="w-full rounded-lg border border-gray-200 p-3"
                      />
                    </div>
                  </div>
                </div>

                <div className="border-t border-gray-200 pt-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Notification Preferences
                  </h3>
                  <div className="space-y-4">
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        name="emailNotifications"
                        checked={formData.emailNotifications}
                        onChange={handleInputChange}
                        className="rounded border-gray-300 text-[#357AFF] focus:ring-[#357AFF]"
                      />
                      <span className="ml-2 text-gray-700">
                        Email Notifications
                      </span>
                    </label>
                    <label className="flex items-center">
                      <input
                        type="checkbox"
                        name="smsNotifications"
                        checked={formData.smsNotifications}
                        onChange={handleInputChange}
                        className="rounded border-gray-300 text-[#357AFF] focus:ring-[#357AFF]"
                      />
                      <span className="ml-2 text-gray-700">
                        SMS Notifications
                      </span>
                    </label>
                  </div>
                </div>

                {error && (
                  <div className="p-3 bg-red-50 text-red-500 rounded-lg">
                    {error}
                  </div>
                )}

                {success && (
                  <div className="p-3 bg-green-50 text-green-500 rounded-lg">
                    {success}
                  </div>
                )}

                <button
                  type="submit"
                  disabled={loading}
                  className="w-full rounded-lg bg-[#357AFF] px-4 py-3 text-white transition-colors hover:bg-[#2E69DE] focus:outline-none focus:ring-2 focus:ring-[#357AFF] focus:ring-offset-2 disabled:opacity-50"
                >
                  {loading ? "Saving..." : "Save Changes"}
                </button>
              </div>
            </form>
          </div>

          <div className="space-y-6">
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Domain Portfolio
              </h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Active Domains</span>
                  <span className="font-medium text-gray-900">5</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Pending Transfers</span>
                  <span className="font-medium text-gray-900">1</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Expiring Soon</span>
                  <span className="font-medium text-red-600">2</span>
                </div>
                <a
                  href="/domains"
                  className="block text-center text-[#357AFF] hover:text-[#2E69DE] transition-colors mt-4"
                >
                  View All Domains
                </a>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Account Status
              </h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Member Since</span>
                  <span className="font-medium text-gray-900">Jan 2025</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Last Login</span>
                  <span className="font-medium text-gray-900">Today</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">2FA Status</span>
                  <span className="font-medium text-yellow-600">
                    Not Enabled
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const [domainSearch, setDomainSearch] = useState("");
  const [loading, setLoading] = useState(false);
  const handleSearch = (e) => {
    e.preventDefault();
    setLoading(true);
    setTimeout(() => setLoading(false), 1000);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
      <nav className="fixed w-full bg-white/80 backdrop-blur-md z-50 border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <i className="fas fa-globe text-[#357AFF] text-2xl"></i>
              <span className="ml-2 text-xl font-bold text-gray-900">
                DomainPro
              </span>
            </div>
            <div className="flex items-center gap-4">
              <a
                href="/account/signin"
                className="text-gray-600 hover:text-gray-900"
              >
                Sign In
              </a>
              <a
                href="/account/signup"
                className="bg-[#357AFF] text-white px-4 py-2 rounded-lg hover:bg-[#2E69DE] transition-colors"
              >
                Get Started
              </a>
            </div>
          </div>
        </div>
      </nav>
      <section className="pt-32 pb-20 px-4">
        <div className="max-w-7xl mx-auto text-center">
          <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
            Find Your Perfect Domain Name
          </h1>
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Secure your online presence with our trusted domain registration
            platform
          </p>
          <form onSubmit={handleSearch} className="max-w-2xl mx-auto">
            <div className="flex gap-2">
              <input
                type="text"
                value={domainSearch}
                onChange={(e) => setDomainSearch(e.target.value)}
                placeholder="Search for your domain name..."
                className="flex-1 px-4 py-3 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#357AFF]"
              />
              <button
                type="submit"
                disabled={loading}
                className="bg-[#357AFF] text-white px-6 py-3 rounded-lg hover:bg-[#2E69DE] transition-colors disabled:opacity-50"
              >
                {loading ? (
                  <i className="fas fa-spinner fa-spin"></i>
                ) : (
                  "Search"
                )}
              </button>
            </div>
          </form>
        </div>
      </section>
      <section className="py-20 px-4 bg-white">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-3xl font-bold text-center mb-12">
            Why Choose Us
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center p-6">
              <i className="fas fa-shield-alt text-4xl text-[#357AFF] mb-4"></i>
              <h3 className="text-xl font-semibold mb-2">Secure & Protected</h3>
              <p className="text-gray-600">
                Advanced security features to protect your domain investment
              </p>
            </div>
            <div className="text-center p-6">
              <i className="fas fa-bolt text-4xl text-[#357AFF] mb-4"></i>
              <h3 className="text-xl font-semibold mb-2">Lightning Fast</h3>
              <p className="text-gray-600">
                Quick domain registration and instant setup
              </p>
            </div>
            <div className="text-center p-6">
              <i className="fas fa-headset text-4xl text-[#357AFF] mb-4"></i>
              <h3 className="text-xl font-semibold mb-2">24/7 Support</h3>
              <p className="text-gray-600">
                Expert support team available around the clock
              </p>
            </div>
          </div>
        </div>
      </section>

      <section className="py-20 px-4">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-3xl font-bold text-center mb-12">
            Simple Pricing
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100">
              <h3 className="text-xl font-semibold mb-4">Basic</h3>
              <div className="text-4xl font-bold mb-4">
                $12<span className="text-lg text-gray-500">/year</span>
              </div>
              <ul className="space-y-3 mb-8">
                <li className="flex items-center">
                  <i className="fas fa-check text-green-500 mr-2"></i> Single
                  Domain
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check text-green-500 mr-2"></i> DNS
                  Management
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check text-green-500 mr-2"></i> Email
                  Support
                </li>
              </ul>
              <a
                href="/account/signup"
                className="block text-center bg-gray-100 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Get Started
              </a>
            </div>
            <div className="bg-[#357AFF] text-white p-8 rounded-xl shadow-lg scale-105 transform">
              <h3 className="text-xl font-semibold mb-4">Pro</h3>
              <div className="text-4xl font-bold mb-4">
                $24<span className="text-lg opacity-75">/year</span>
              </div>
              <ul className="space-y-3 mb-8">
                <li className="flex items-center">
                  <i className="fas fa-check mr-2"></i> Multiple Domains
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check mr-2"></i> Advanced DNS
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check mr-2"></i> Priority Support
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check mr-2"></i> Domain Privacy
                </li>
              </ul>
              <a
                href="/account/signup"
                className="block text-center bg-white text-[#357AFF] px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Get Started
              </a>
            </div>
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100">
              <h3 className="text-xl font-semibold mb-4">Enterprise</h3>
              <div className="text-4xl font-bold mb-4">
                $49<span className="text-lg text-gray-500">/year</span>
              </div>
              <ul className="space-y-3 mb-8">
                <li className="flex items-center">
                  <i className="fas fa-check text-green-500 mr-2"></i> Unlimited
                  Domains
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check text-green-500 mr-2"></i> Custom
                  DNS
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check text-green-500 mr-2"></i> 24/7
                  Support
                </li>
                <li className="flex items-center">
                  <i className="fas fa-check text-green-500 mr-2"></i> Advanced
                  Security
                </li>
              </ul>
              <a
                href="/account/signup"
                className="block text-center bg-gray-100 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Get Started
              </a>
            </div>
          </div>
        </div>
      </section>

      <section className="py-20 px-4 bg-white">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-3xl font-bold text-center mb-12">
            What Our Customers Say
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="bg-gray-50 p-6 rounded-xl">
              <div className="text-[#357AFF] mb-2">★★★★★</div>
              <p className="text-gray-600 mb-4">
                "The easiest domain registration process I've ever experienced.
                Fantastic service!"
              </p>
              <div className="flex items-center">
                <img
                  src="/avatar1.jpg"
                  alt="Customer avatar"
                  className="w-10 h-10 rounded-full"
                />
                <div className="ml-3">
                  <div className="font-semibold">Sarah Johnson</div>
                  <div className="text-sm text-gray-500">Tech Entrepreneur</div>
                </div>
              </div>
            </div>
            <div className="bg-gray-50 p-6 rounded-xl">
              <div className="text-[#357AFF] mb-2">★★★★★</div>
              <p className="text-gray-600 mb-4">
                "Great pricing and even better customer support. Highly
                recommended!"
              </p>
              <div className="flex items-center">
                <img
                  src="/avatar2.jpg"
                  alt="Customer avatar"
                  className="w-10 h-10 rounded-full"
                />
                <div className="ml-3">
                  <div className="font-semibold">Michael Chen</div>
                  <div className="text-sm text-gray-500">Business Owner</div>
                </div>
              </div>
            </div>
            <div className="bg-gray-50 p-6 rounded-xl">
              <div className="text-[#357AFF] mb-2">★★★★★</div>
              <p className="text-gray-600 mb-4">
                "The security features give me peace of mind. Worth every
                penny!"
              </p>
              <div className="flex items-center">
                <img
                  src="/avatar3.jpg"
                  alt="Customer avatar"
                  className="w-10 h-10 rounded-full"
                />
                <div className="ml-3">
                  <div className="font-semibold">Emily Davis</div>
                  <div className="text-sm text-gray-500">Digital Creator</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <section className="py-20 px-4">
        <div className="max-w-7xl mx-auto text-center">
          <div className="mb-12 space-y-4">
            <div className="flex justify-center gap-8">
              <img
                src="/security-badge1.png"
                alt="Security certification"
                className="h-16"
              />
              <img
                src="/security-badge2.png"
                alt="Trust certification"
                className="h-16"
              />
              <img
                src="/security-badge3.png"
                alt="SSL certification"
                className="h-16"
              />
            </div>
            <p className="text-gray-600">
              Trusted by over 100,000 customers since 2015
            </p>
          </div>

          <div className="bg-[#357AFF] text-white p-12 rounded-2xl">
            <h2 className="text-3xl font-bold mb-4">Ready to Get Started?</h2>
            <p className="text-xl mb-8">
              Secure your domain name today and build your online presence
            </p>
            <a
              href="/account/signup"
              className="inline-block bg-white text-[#357AFF] px-8 py-3 rounded-lg text-lg font-semibold hover:bg-gray-50 transition-colors"
            >
              Create Your Account
            </a>
          </div>
        </div>
      </section>

      <footer className="bg-gray-900 text-white py-12 px-4">
        <div className="max-w-7xl mx-auto grid md:grid-cols-4 gap-8">
          <div>
            <div className="flex items-center mb-4">
              <i className="fas fa-globe text-[#357AFF] text-2xl"></i>
              <span className="ml-2 text-xl font-bold">DomainPro</span>
            </div>
            <p className="text-gray-400">
              Secure and reliable domain registration services
            </p>
          </div>
          <div>
            <h3 className="font-semibold mb-4">Company</h3>
            <ul className="space-y-2 text-gray-400">
              <li>
                <a href="#" className="hover:text-white">
                  About Us
                </a>
              </li>
              <li>
                <a href="#" className="hover:text-white">
                  Contact
                </a>
              </li>
              <li>
                <a href="#" className="hover:text-white">
                  Blog
                </a>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold mb-4">Legal</h3>
            <ul className="space-y-2 text-gray-400">
              <li>
                <a href="#" className="hover:text-white">
                  Privacy Policy
                </a>
              </li>
              <li>
                <a href="#" className="hover:text-white">
                  Terms of Service
                </a>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold mb-4">Connect</h3>
            <div className="flex space-x-4">
              <a href="#" className="text-gray-400 hover:text-white">
                <i className="fab fa-twitter"></i>
              </a>
              <a href="#" className="text-gray-400 hover:text-white">
                <i className="fab fa-facebook"></i>
              </a>
              <a href="#" className="text-gray-400 hover:text-white">
                <i className="fab fa-linkedin"></i>
              </a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const { data: user, loading: userLoading } = useUser();
  const [accounts, setAccounts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingAccount, setEditingAccount] = useState(null);
  const [formData, setFormData] = useState({
    account_holder_name: "",
    bank_name: "",
    account_number: "",
    routing_number: "",
    account_type: "checking",
    is_default: false,
  });
  const [validationErrors, setValidationErrors] = useState({});
  const fetchAccounts = async () => {
    try {
      const response = await fetch("/api/list-bank-accounts", {
        method: "POST",
      });

      if (!response.ok) {
        throw new Error("Failed to fetch accounts");
      }

      const data = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      setAccounts(data.accounts || []);
    } catch (err) {
      console.error(err);
      setError("Could not load bank accounts");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAccounts();
  }, []);

  const validateForm = () => {
    const errors = {};
    if (!/^\d{8,17}$/.test(formData.account_number)) {
      errors.account_number = "Account number must be between 8 and 17 digits";
    }
    if (!/^\d{9}$/.test(formData.routing_number)) {
      errors.routing_number = "Routing number must be exactly 9 digits";
    }
    if (!formData.account_holder_name.trim()) {
      errors.account_holder_name = "Account holder name is required";
    }
    if (!formData.bank_name.trim()) {
      errors.bank_name = "Bank name is required";
    }
    return errors;
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);
    setValidationErrors({});

    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setValidationErrors(errors);
      return;
    }

    try {
      const endpoint = editingAccount
        ? "/api/update-bank-account"
        : "/api/add-bank-account";

      const body = editingAccount
        ? { ...formData, account_id: editingAccount.id }
        : formData;

      const response = await fetch(endpoint, {
        method: "POST",
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        throw new Error("Failed to save account");
      }

      const data = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchAccounts();
      setSuccess("Bank account saved successfully!");
      setShowAddForm(false);
      setEditingAccount(null);
      setFormData({
        account_holder_name: "",
        bank_name: "",
        account_number: "",
        routing_number: "",
        account_type: "checking",
        is_default: false,
      });
    } catch (err) {
      setError(err.message);
    }
  };
  const handleDelete = async (accountId) => {
    try {
      const response = await fetch("/api/delete-bank-account", {
        method: "POST",
        body: JSON.stringify({ account_id: accountId }),
      });

      if (!response.ok) {
        throw new Error("Failed to delete account");
      }

      const data = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchAccounts();
      setSuccess("Bank account deleted successfully!");
    } catch (err) {
      setError(err.message);
    }
  };

  if (userLoading || loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-500 font-inter">
          <i className="fas fa-spinner fa-spin text-2xl"></i>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 font-inter mb-4">
            Please sign in to manage your banking details
          </p>
          <a
            href="/account/signin?callbackUrl=/account/banking"
            className="bg-[#357AFF] text-white px-6 py-2 rounded-lg hover:bg-[#2E69DE] transition-colors font-inter"
          >
            Sign In
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6 rounded">
          <div className="flex items-center">
            <i className="fas fa-info-circle text-blue-400 mr-2"></i>
            <p className="text-blue-700 font-inter">
              Payouts are processed monthly for amounts over $1
            </p>
          </div>
        </div>
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 font-inter">
              Banking Settings
            </h1>
            <p className="text-gray-500 mt-1 font-inter">
              Manage your connected bank accounts and payout preferences
            </p>
          </div>
          {!showAddForm && (
            <button
              onClick={() => setShowAddForm(true)}
              className="bg-[#357AFF] text-white px-4 py-2 rounded-lg hover:bg-[#2E69DE] transition-colors font-inter"
            >
              <i className="fas fa-plus mr-2"></i>
              Add Bank Account
            </button>
          )}
        </div>

        {error && (
          <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6 rounded">
            <div className="flex items-center">
              <i className="fas fa-exclamation-circle text-red-400 mr-2"></i>
              <p className="text-red-700 font-inter">{error}</p>
            </div>
          </div>
        )}

        {success && (
          <div className="bg-green-50 border-l-4 border-green-400 p-4 mb-6 rounded">
            <div className="flex items-center">
              <i className="fas fa-check-circle text-green-400 mr-2"></i>
              <p className="text-green-700 font-inter">{success}</p>
            </div>
          </div>
        )}

        {(showAddForm || editingAccount) && (
          <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 font-inter mb-4">
              {editingAccount ? "Edit Bank Account" : "Add New Bank Account"}
            </h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 font-inter mb-1">
                    Account Holder Name
                  </label>
                  <input
                    type="text"
                    name="account_holder_name"
                    value={formData.account_holder_name}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        account_holder_name: e.target.value,
                      })
                    }
                    className={`w-full px-3 py-2 border ${
                      validationErrors.account_holder_name
                        ? "border-red-300"
                        : "border-gray-300"
                    } rounded-lg focus:ring-[#357AFF] focus:border-[#357AFF] font-inter`}
                    required
                  />
                  {validationErrors.account_holder_name && (
                    <p className="mt-1 text-sm text-red-600">
                      {validationErrors.account_holder_name}
                    </p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 font-inter mb-1">
                    Bank Name
                  </label>
                  <input
                    type="text"
                    name="bank_name"
                    value={formData.bank_name}
                    onChange={(e) =>
                      setFormData({ ...formData, bank_name: e.target.value })
                    }
                    className={`w-full px-3 py-2 border ${
                      validationErrors.bank_name
                        ? "border-red-300"
                        : "border-gray-300"
                    } rounded-lg focus:ring-[#357AFF] focus:border-[#357AFF] font-inter`}
                    required
                  />
                  {validationErrors.bank_name && (
                    <p className="mt-1 text-sm text-red-600">
                      {validationErrors.bank_name}
                    </p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 font-inter mb-1">
                    Account Number
                    <i
                      className="fas fa-question-circle ml-1 text-gray-400 cursor-help"
                      title="Your account number can be found at the bottom of your checks, usually the second or third set of numbers"
                    ></i>
                  </label>
                  <input
                    type="text"
                    name="account_number"
                    value={formData.account_number}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        account_number: e.target.value,
                      })
                    }
                    className={`w-full px-3 py-2 border ${
                      validationErrors.account_number
                        ? "border-red-300"
                        : "border-gray-300"
                    } rounded-lg focus:ring-[#357AFF] focus:border-[#357AFF] font-inter`}
                    required
                  />
                  {validationErrors.account_number && (
                    <p className="mt-1 text-sm text-red-600">
                      {validationErrors.account_number}
                    </p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 font-inter mb-1">
                    Routing Number
                    <i
                      className="fas fa-question-circle ml-1 text-gray-400 cursor-help"
                      title="Your 9-digit routing number can be found at the bottom of your checks, it's usually the first set of numbers"
                    ></i>
                  </label>
                  <input
                    type="text"
                    name="routing_number"
                    value={formData.routing_number}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        routing_number: e.target.value,
                      })
                    }
                    className={`w-full px-3 py-2 border ${
                      validationErrors.routing_number
                        ? "border-red-300"
                        : "border-gray-300"
                    } rounded-lg focus:ring-[#357AFF] focus:border-[#357AFF] font-inter`}
                    required
                  />
                  {validationErrors.routing_number && (
                    <p className="mt-1 text-sm text-red-600">
                      {validationErrors.routing_number}
                    </p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 font-inter mb-1">
                    Account Type
                  </label>
                  <select
                    name="account_type"
                    value={formData.account_type}
                    onChange={(e) =>
                      setFormData({ ...formData, account_type: e.target.value })
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#357AFF] focus:border-[#357AFF] font-inter"
                  >
                    <option value="checking">Checking</option>
                    <option value="savings">Savings</option>
                  </select>
                </div>
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    name="is_default"
                    checked={formData.is_default}
                    onChange={(e) =>
                      setFormData({ ...formData, is_default: e.target.checked })
                    }
                    className="h-4 w-4 text-[#357AFF] focus:ring-[#357AFF] border-gray-300 rounded"
                  />
                  <label className="ml-2 block text-sm text-gray-700 font-inter">
                    Set as default account
                  </label>
                </div>
              </div>
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowAddForm(false);
                    setEditingAccount(null);
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-inter"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-[#357AFF] text-white rounded-lg hover:bg-[#2E69DE] font-inter"
                >
                  {editingAccount ? "Save Changes" : "Add Account"}
                </button>
              </div>
            </form>
          </div>
        )}

        <div className="bg-white rounded-xl shadow-sm p-6">
          <h2 className="text-lg font-semibold text-gray-900 font-inter mb-4">
            Connected Bank Accounts
          </h2>
          {accounts.length === 0 ? (
            <div className="text-center py-8">
              <i className="fas fa-university text-gray-400 text-4xl mb-3"></i>
              <p className="text-gray-500 font-inter">
                No bank accounts connected yet
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {accounts.map((account) => (
                <div
                  key={account.id}
                  className="border border-gray-200 rounded-lg p-4"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <div className="flex items-center">
                        <i className="fas fa-university text-[#357AFF] mr-2"></i>
                        <span className="font-medium text-gray-900 font-inter">
                          {account.bank_name}
                        </span>
                        {account.is_default && (
                          <span className="ml-2 bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded font-inter">
                            Default
                          </span>
                        )}
                      </div>
                      <p className="text-gray-500 text-sm mt-1 font-inter">
                        {account.account_holder_name}
                      </p>
                      <p className="text-gray-500 text-sm font-inter">
                        {account.account_type.charAt(0).toUpperCase() +
                          account.account_type.slice(1)}{" "}
                        •••• {account.masked_account_number}
                      </p>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => {
                          setEditingAccount(account);
                          setFormData({
                            account_holder_name: account.account_holder_name,
                            bank_name: account.bank_name,
                            account_type: account.account_type,
                            is_default: account.is_default,
                            account_number: "",
                            routing_number: "",
                          });
                        }}
                        className="text-gray-600 hover:text-gray-900"
                      >
                        <i className="fas fa-edit"></i>
                      </button>
                      <button
                        onClick={() => handleDelete(account.id)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <i className="fas fa-trash"></i>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const [dateRange, setDateRange] = useState({
    start: "2023-01-01",
    end: "2023-12-31",
  });
  const [groupBy, setGroupBy] = useState("month");
  const [reportData, setReportData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchReport = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch("/api/generate-profit-report", {
        method: "POST",
        body: JSON.stringify({
          startDate: dateRange.start,
          endDate: dateRange.end,
          groupBy,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch report");
      }

      const data = await response.json();
      setReportData(data);
    } catch (err) {
      console.error(err);
      setError("Could not load the profit report");
    } finally {
      setLoading(false);
    }
  }, [dateRange, groupBy]);

  useEffect(() => {
    fetchReport();
  }, [fetchReport]);

  const exportToCSV = () => {
    if (!reportData) return;

    const csvContent =
      `data:text/csv;charset=utf-8,Period,Revenue,Costs,Profit,Transactions\n` +
      Object.entries(reportData.detailedReport)
        .map(
          ([period, data]) =>
            `${period},${data.periodTotals.revenue},${data.periodTotals.costs},${data.periodTotals.profit},${data.periodTotals.transactions}`
        )
        .join("\n");

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute(
      "download",
      `profit-report-${dateRange.start}-${dateRange.end}.csv`
    );
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="animate-pulse text-center text-gray-500">
          Loading your profit data...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="text-red-500 text-center">{error}</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto space-y-6">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-gray-800">
              Profit Dashboard
            </h1>
            <div className="flex gap-4">
              <select
                value={groupBy}
                onChange={(e) => setGroupBy(e.target.value)}
                className="rounded border p-2"
              >
                <option value="month">Monthly</option>
                <option value="year">Yearly</option>
              </select>
              <button
                onClick={exportToCSV}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              >
                Export Report
              </button>
            </div>
          </div>

          {reportData && (
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="text-sm text-green-600">Total Revenue</div>
                <div className="text-2xl font-bold">
                  ${reportData.summary.totalRevenue.toLocaleString()}
                </div>
              </div>
              <div className="bg-red-50 p-4 rounded-lg">
                <div className="text-sm text-red-600">Total Costs</div>
                <div className="text-2xl font-bold">
                  ${reportData.summary.totalCosts.toLocaleString()}
                </div>
              </div>
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="text-sm text-blue-600">Total Profit</div>
                <div className="text-2xl font-bold">
                  ${reportData.summary.totalProfit.toLocaleString()}
                </div>
              </div>
              <div className="bg-purple-50 p-4 rounded-lg">
                <div className="text-sm text-purple-600">Profit Margin</div>
                <div className="text-2xl font-bold">
                  {reportData.summary.overallMargin}%
                </div>
              </div>
            </div>
          )}

          {reportData && (
            <div className="space-y-6">
              <div className="bg-white rounded-lg p-4">
                <h2 className="text-xl font-semibold mb-4">Period Breakdown</h2>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left p-2">Period</th>
                        <th className="text-right p-2">Revenue</th>
                        <th className="text-right p-2">Costs</th>
                        <th className="text-right p-2">Profit</th>
                        <th className="text-right p-2">Margin</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Object.entries(reportData.detailedReport).map(
                        ([period, data]) => (
                          <tr
                            key={period}
                            className="border-b hover:bg-gray-50"
                          >
                            <td className="p-2">{period}</td>
                            <td className="text-right p-2">
                              ${data.periodTotals.revenue.toLocaleString()}
                            </td>
                            <td className="text-right p-2">
                              ${data.periodTotals.costs.toLocaleString()}
                            </td>
                            <td className="text-right p-2">
                              ${data.periodTotals.profit.toLocaleString()}
                            </td>
                            <td className="text-right p-2">
                              {(
                                (data.periodTotals.profit /
                                  data.periodTotals.revenue) *
                                100
                              ).toFixed(2)}
                              %
                            </td>
                          </tr>
                        )
                      )}
                    </tbody>
                  </table>
                </div>
              </div>

              <div className="bg-white rounded-lg p-4">
                <h2 className="text-xl font-semibold mb-4">
                  Extension Breakdown
                </h2>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left p-2">Extension</th>
                        <th className="text-right p-2">Revenue</th>
                        <th className="text-right p-2">Profit</th>
                        <th className="text-right p-2">Transactions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {Object.entries(reportData.detailedReport).map(
                        ([period, data]) =>
                          Object.entries(data.extensions).map(
                            ([ext, extData]) => (
                              <tr
                                key={`${period}-${ext}`}
                                className="border-b hover:bg-gray-50"
                              >
                                <td className="p-2">{ext}</td>
                                <td className="text-right p-2">
                                  ${extData.revenue.toLocaleString()}
                                </td>
                                <td className="text-right p-2">
                                  ${extData.profit.toLocaleString()}
                                </td>
                                <td className="text-right p-2">
                                  {extData.transactions}
                                </td>
                              </tr>
                            )
                          )
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const { data: user, loading: userLoading } = useUser();
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        const response = await fetch("/api/get-user-notifications", {
          method: "POST",
        });

        if (!response.ok) {
          throw new Error("Failed to fetch notifications");
        }

        const data = await response.json();
        if (data.error) {
          throw new Error(data.error);
        }

        setNotifications(data.notifications || []);
      } catch (err) {
        console.error(err);
        setError("Could not load notifications");
      } finally {
        setLoading(false);
      }
    };

    fetchNotifications();
  }, []);

  if (userLoading || loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-500 font-inter">
          <i className="fas fa-spinner fa-spin text-2xl"></i>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 font-inter mb-4">
            Please sign in to view your payment status
          </p>
          <a
            href="/account/signin?callbackUrl=/account/payments"
            className="bg-[#357AFF] text-white px-6 py-2 rounded-lg hover:bg-[#2E69DE] transition-colors font-inter"
          >
            Sign In
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 font-inter">
              Payment Status
            </h1>
            <p className="text-gray-500 mt-1 font-inter">
              Track your payment verification progress
            </p>
          </div>
          <a
            href="/account/payment-methods"
            className="bg-white text-gray-600 px-4 py-2 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors font-inter flex items-center"
          >
            <i className="fas fa-credit-card mr-2"></i>
            Manage Payment Methods
          </a>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h2 className="text-lg font-semibold text-gray-900 font-inter mb-4">
              <i className="fas fa-clock text-[#357AFF] mr-2"></i>
              Verification Process
            </h2>
            <div className="space-y-4">
              <div className="flex items-start">
                <div className="bg-blue-100 rounded-full p-2 mr-3">
                  <i className="fas fa-paper-plane text-[#357AFF]"></i>
                </div>
                <div>
                  <p className="font-medium text-gray-900 font-inter">
                    Payment Submission
                  </p>
                  <p className="text-sm text-gray-500 font-inter">
                    Your payment is submitted for processing
                  </p>
                </div>
              </div>
              <div className="flex items-start">
                <div className="bg-blue-100 rounded-full p-2 mr-3">
                  <i className="fas fa-check-circle text-[#357AFF]"></i>
                </div>
                <div>
                  <p className="font-medium text-gray-900 font-inter">
                    Verification
                  </p>
                  <p className="text-sm text-gray-500 font-inter">
                    Our team verifies your payment (1-2 business days)
                  </p>
                </div>
              </div>
              <div className="flex items-start">
                <div className="bg-blue-100 rounded-full p-2 mr-3">
                  <i className="fas fa-flag text-[#357AFF]"></i>
                </div>
                <div>
                  <p className="font-medium text-gray-900 font-inter">
                    Completion
                  </p>
                  <p className="text-sm text-gray-500 font-inter">
                    Your domain is activated upon verification
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm p-6">
            <h2 className="text-lg font-semibold text-gray-900 font-inter mb-4">
              <i className="fas fa-bell text-[#357AFF] mr-2"></i>
              Recent Notifications
            </h2>
            {error ? (
              <div className="text-red-500 font-inter">
                <i className="fas fa-exclamation-circle mr-2"></i>
                {error}
              </div>
            ) : notifications.length === 0 ? (
              <div className="text-gray-500 font-inter text-center py-8">
                <i className="fas fa-inbox text-4xl mb-2"></i>
                <p>No notifications yet</p>
              </div>
            ) : (
              <div className="space-y-4">
                {notifications.map((notification, index) => (
                  <div
                    key={index}
                    className="border-l-4 border-[#357AFF] bg-blue-50 p-4 rounded-r-lg"
                  >
                    <p className="text-gray-900 font-inter">
                      {notification.message}
                    </p>
                    <p className="text-sm text-gray-500 font-inter mt-1">
                      {new Date(notification.created_at).toLocaleDateString()}
                    </p>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        <div className="mt-6 bg-white rounded-xl shadow-sm p-6">
          <h2 className="text-lg font-semibold text-gray-900 font-inter mb-4">
            <i className="fas fa-history text-[#357AFF] mr-2"></i>
            Payment History
          </h2>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left py-3 px-4 font-inter">Date</th>
                  <th className="text-left py-3 px-4 font-inter">Domain</th>
                  <th className="text-left py-3 px-4 font-inter">Amount</th>
                  <th className="text-left py-3 px-4 font-inter">Status</th>
                </tr>
              </thead>
              <tbody>
                <tr className="border-b border-gray-200">
                  <td className="py-3 px-4 font-inter">Jan 15, 2025</td>
                  <td className="py-3 px-4 font-inter">example.com</td>
                  <td className="py-3 px-4 font-inter">$12.99</td>
                  <td className="py-3 px-4">
                    <span className="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm font-inter">
                      Completed
                    </span>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const { data: user, loading: userLoading } = useUser();
  const [activeTab, setActiveTab] = useState("profile");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [initialFormData, setInitialFormData] = useState(null);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    address: "",
    paymentReminderDays: 7,
    minimumPayoutAmount: 100,
    payoutFrequency: "monthly",
    emailNotifications: true,
    smsNotifications: false,
    twoFactorAuth: false,
  });

  const [formErrors, setFormErrors] = useState({});
  const hasUnsavedChanges =
    JSON.stringify(formData) !== JSON.stringify(initialFormData);
  const isFormValid = Object.keys(formErrors).length === 0;

  useEffect(() => {
    const loadSettings = async () => {
      try {
        const response = await fetch("/api/get-user-settings", {
          method: "POST",
          body: JSON.stringify({}),
        });

        if (!response.ok) {
          throw new Error("Failed to load settings");
        }

        const { settings } = await response.json();
        setFormData((prev) => ({
          ...prev,
          ...settings,
          paymentReminderDays: settings.paymentPreferences.reminderDays,
          minimumPayoutAmount: settings.payoutPreferences.minimumAmount,
          payoutFrequency: settings.payoutPreferences.frequency,
        }));
        setInitialFormData(settings);
      } catch (err) {
        setError("Failed to load settings");
      }
    };

    if (user) {
      loadSettings();
    }
  }, [user]);

  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (hasUnsavedChanges) {
        e.preventDefault();
        e.returnValue = "";
      }
    };

    const handleKeyDown = (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === "s") {
        e.preventDefault();
        handleSubmit(new Event("submit"));
      }
    };

    window.addEventListener("beforeunload", handleBeforeUnload);
    document.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [hasUnsavedChanges]);

  const validateForm = () => {
    const errors = {};

    if (formData.paymentReminderDays < 1 || formData.paymentReminderDays > 30) {
      errors.paymentReminderDays = "Must be between 1 and 30 days";
    }

    if (formData.minimumPayoutAmount <= 0) {
      errors.minimumPayoutAmount = "Must be greater than 0";
    }

    if (!["weekly", "monthly"].includes(formData.payoutFrequency)) {
      errors.payoutFrequency = "Must be weekly or monthly";
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const newValue = type === "checkbox" ? checked : value;

    setFormData((prev) => ({
      ...prev,
      [name]: newValue,
    }));

    validateForm();
  };

  const handleReset = () => {
    setFormData(initialFormData);
    setFormErrors({});
  };

  const handleSaveClick = (e) => {
    if (hasUnsavedChanges) {
      e.preventDefault();
      setShowConfirmDialog(true);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch("/api/validate-settings", {
        method: "POST",
        body: JSON.stringify({
          paymentReminderDays: formData.paymentReminderDays,
          minimumPayoutAmount: formData.minimumPayoutAmount,
          payoutFrequency: formData.payoutFrequency,
        }),
      });

      if (!response.ok) {
        throw new Error("Validation failed");
      }

      setSuccess("Settings updated successfully");
      setInitialFormData(formData);
    } catch (err) {
      setError("Failed to update settings");
    } finally {
      setLoading(false);
      setShowConfirmDialog(false);
    }
  };

  if (userLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4 flex items-center justify-center">
        <div className="text-gray-600">Loading...</div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4 flex items-center justify-center">
        <div className="text-gray-600">
          Please sign in to access account settings
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4">
      <div className="max-w-4xl mx-auto">
        <nav className="flex mb-4" aria-label="Breadcrumb">
          <ol className="inline-flex items-center space-x-1 md:space-x-3">
            <li className="inline-flex items-center">
              <a href="/" className="text-gray-700 hover:text-[#357AFF]">
                Home
              </a>
            </li>
            <li>
              <div className="flex items-center">
                <span className="mx-2 text-gray-400">/</span>
                <span className="text-gray-500">Account Settings</span>
              </div>
            </li>
          </ol>
        </nav>

        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">Account Settings</h1>
          <a
            href="/banking-settings"
            className="px-4 py-2 rounded-lg bg-[#357AFF] text-white hover:bg-[#2E69DE] transition-colors"
          >
            Banking Settings
          </a>
        </div>

        <div className="bg-white rounded-2xl shadow-xl p-6">
          <div className="flex flex-wrap gap-4 mb-6">
            {[
              "profile",
              "billing",
              "payments",
              "communications",
              "security",
            ].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-4 py-2 rounded-lg capitalize ${
                  activeTab === tab
                    ? "bg-[#357AFF] text-white"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                {tab}
              </button>
            ))}
          </div>

          <form onSubmit={handleSubmit}>
            {activeTab === "profile" && (
              <div className="space-y-4">
                <FormField label="Name" required error={formErrors.name}>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </FormField>

                <FormField label="Email" required error={formErrors.email}>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </FormField>

                <FormField
                  label="Payment Reminder Days"
                  required
                  error={formErrors.paymentReminderDays}
                  helperText="Number of days before payment is due"
                >
                  <input
                    type="number"
                    name="paymentReminderDays"
                    value={formData.paymentReminderDays}
                    onChange={handleInputChange}
                    min="1"
                    max="30"
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </FormField>

                <FormField
                  label="Minimum Payout Amount"
                  required
                  error={formErrors.minimumPayoutAmount}
                  helperText="Minimum amount required for payout"
                >
                  <input
                    type="number"
                    name="minimumPayoutAmount"
                    value={formData.minimumPayoutAmount}
                    onChange={handleInputChange}
                    min="0"
                    step="0.01"
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </FormField>

                <FormField
                  label="Payout Frequency"
                  required
                  error={formErrors.payoutFrequency}
                >
                  <select
                    name="payoutFrequency"
                    value={formData.payoutFrequency}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  >
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                  </select>
                </FormField>
              </div>
            )}

            {activeTab === "billing" && (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Card Number
                  </label>
                  <input
                    type="text"
                    name="cardNumber"
                    value={formData.cardNumber}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Expiry Date
                    </label>
                    <input
                      type="text"
                      name="expiryDate"
                      value={formData.expiryDate}
                      onChange={handleInputChange}
                      placeholder="MM/YY"
                      className="w-full rounded-lg border border-gray-200 p-3"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      CVV
                    </label>
                    <input
                      type="text"
                      name="cvv"
                      value={formData.cvv}
                      onChange={handleInputChange}
                      className="w-full rounded-lg border border-gray-200 p-3"
                    />
                  </div>
                </div>
              </div>
            )}

            {activeTab === "payments" && (
              <div className="space-y-4">
                <div className="border border-gray-200 rounded-lg p-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="font-medium">Domain Registration</p>
                      <p className="text-sm text-gray-600">Jan 15, 2025</p>
                    </div>
                    <div className="text-right">
                      <p className="font-medium">$12.99</p>
                      <p className="text-sm text-green-600">Completed</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === "communications" && (
              <div className="space-y-4">
                <ToggleField
                  checked={formData.emailNotifications}
                  onChange={(e) =>
                    handleInputChange({
                      target: {
                        name: "emailNotifications",
                        type: "checkbox",
                        checked: e.target.checked,
                      },
                    })
                  }
                  label="Email Notifications"
                  description="Receive updates via email"
                />

                <ToggleField
                  checked={formData.smsNotifications}
                  onChange={(e) =>
                    handleInputChange({
                      target: {
                        name: "smsNotifications",
                        type: "checkbox",
                        checked: e.target.checked,
                      },
                    })
                  }
                  label="SMS Notifications"
                  description="Receive updates via SMS"
                />
              </div>
            )}

            {activeTab === "security" && (
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                  <div>
                    <p className="font-medium">Two-Factor Authentication</p>
                    <p className="text-sm text-gray-600">
                      Add an extra layer of security
                    </p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      name="twoFactorAuth"
                      checked={formData.twoFactorAuth}
                      onChange={handleInputChange}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-[#357AFF]"></div>
                  </label>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Current Password
                  </label>
                  <input
                    type="password"
                    name="currentPassword"
                    value={formData.currentPassword}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    New Password
                  </label>
                  <input
                    type="password"
                    name="newPassword"
                    value={formData.newPassword}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Confirm New Password
                  </label>
                  <input
                    type="password"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    className="w-full rounded-lg border border-gray-200 p-3"
                  />
                </div>
              </div>
            )}

            {error && (
              <div className="mt-4 p-3 bg-red-50 text-red-500 rounded-lg">
                {error}
              </div>
            )}

            {success && (
              <div className="mt-4 p-3 bg-green-50 text-green-500 rounded-lg">
                {success}
              </div>
            )}

            <div className="flex justify-between mt-6">
              <button
                type="button"
                onClick={handleReset}
                className="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200"
              >
                Reset to Defaults
              </button>
              <button
                type="submit"
                disabled={loading || !isFormValid}
                className="px-4 py-2 bg-[#357AFF] text-white rounded-lg hover:bg-[#2E69DE] disabled:opacity-50"
                onClick={handleSaveClick}
              >
                {loading ? "Saving..." : "Save Changes"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("general");
  const [ticketSubject, setTicketSubject] = useState("");
  const [ticketDescription, setTicketDescription] = useState("");
  const [ticketPriority, setTicketPriority] = useState("medium");
  const [showChat, setShowChat] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);

  const { data: user } = useUser();

  const faqCategories = {
    general: [
      {
        question: "How do I register a new domain?",
        answer:
          "You can register a new domain by using our domain search tool, selecting your desired domain name, and completing the checkout process.",
      },
      {
        question: "What payment methods do you accept?",
        answer:
          "We accept credit cards, bank transfers, and various digital payment methods for all our services.",
      },
    ],
    technical: [
      {
        question: "How do I configure DNS settings?",
        answer:
          "You can manage DNS settings through your domain dashboard. Navigate to the DNS management section to add or modify records.",
      },
      {
        question: "How long does domain propagation take?",
        answer:
          "Domain propagation typically takes 24-48 hours, though some changes may be visible sooner.",
      },
    ],
    billing: [
      {
        question: "How do I update my billing information?",
        answer:
          "You can update your billing information in your account settings under the billing section.",
      },
      {
        question: "What happens if my domain expires?",
        answer:
          "Domains enter a grace period after expiration, during which you can still renew. After this period, the domain may become available for others.",
      },
    ],
  };

  const knowledgeBaseArticles = [
    {
      title: "Getting Started with Domain Management",
      category: "Basics",
      icon: "fa-rocket",
    },
    {
      title: "Understanding DNS Records",
      category: "Technical",
      icon: "fa-server",
    },
    {
      title: "Domain Transfer Guide",
      category: "Domains",
      icon: "fa-exchange-alt",
    },
    {
      title: "SSL Certificate Installation",
      category: "Security",
      icon: "fa-shield-alt",
    },
  ];

  const handleTicketSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      const response = await fetch("/api/create-ticket", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          subject: ticketSubject,
          description: ticketDescription,
          priority: ticketPriority,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to create ticket");
      }

      setSuccess(true);
      setTicketSubject("");
      setTicketDescription("");
      setTicketPriority("medium");
    } catch (err) {
      setError("Failed to create support ticket. Please try again.");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold text-gray-900">Support Center</h1>
            {user && (
              <a
                href="/dashboard"
                className="text-[#357AFF] hover:text-[#2E69DE]"
              >
                Back to Dashboard
              </a>
            )}
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-12">
          <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
            <h2 className="text-xl font-bold text-gray-900 mb-4">
              How can we help you?
            </h2>
            <div className="relative">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search for help..."
                className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-[#357AFF] focus:ring-1 focus:ring-[#357AFF] outline-none"
              />
              <i className="fas fa-search absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
            <h2 className="text-xl font-bold text-gray-900 mb-6">
              Frequently Asked Questions
            </h2>
            <div className="space-y-4">
              <div className="flex space-x-4 mb-4">
                {Object.keys(faqCategories).map((category) => (
                  <button
                    key={category}
                    onClick={() => setSelectedCategory(category)}
                    className={`px-4 py-2 rounded-lg ${
                      selectedCategory === category
                        ? "bg-[#357AFF] text-white"
                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                    }`}
                  >
                    {category.charAt(0).toUpperCase() + category.slice(1)}
                  </button>
                ))}
              </div>
              {faqCategories[selectedCategory].map((faq, index) => (
                <details key={index} className="bg-gray-50 rounded-lg p-4">
                  <summary className="font-medium text-gray-900 cursor-pointer">
                    {faq.question}
                  </summary>
                  <p className="mt-2 text-gray-600">{faq.answer}</p>
                </details>
              ))}
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
            <h2 className="text-xl font-bold text-gray-900 mb-6">
              Knowledge Base
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {knowledgeBaseArticles.map((article, index) => (
                <a
                  key={index}
                  href="#"
                  className="block p-4 rounded-lg border border-gray-200 hover:border-[#357AFF] transition-colors"
                >
                  <i
                    className={`fas ${article.icon} text-[#357AFF] text-2xl mb-2`}
                  ></i>
                  <h3 className="font-medium text-gray-900">{article.title}</h3>
                  <p className="text-sm text-gray-600">{article.category}</p>
                </a>
              ))}
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-6">
              Submit a Ticket
            </h2>
            <form onSubmit={handleTicketSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Subject
                </label>
                <input
                  type="text"
                  name="subject"
                  value={ticketSubject}
                  onChange={(e) => setTicketSubject(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-[#357AFF] focus:ring-1 focus:ring-[#357AFF] outline-none"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  name="description"
                  value={ticketDescription}
                  onChange={(e) => setTicketDescription(e.target.value)}
                  rows="4"
                  className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-[#357AFF] focus:ring-1 focus:ring-[#357AFF] outline-none"
                  required
                ></textarea>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Priority
                </label>
                <select
                  name="priority"
                  value={ticketPriority}
                  onChange={(e) => setTicketPriority(e.target.value)}
                  className="w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-[#357AFF] focus:ring-1 focus:ring-[#357AFF] outline-none"
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                </select>
              </div>

              {error && (
                <div className="rounded-lg bg-red-50 p-3 text-sm text-red-500">
                  {error}
                </div>
              )}

              {success && (
                <div className="rounded-lg bg-green-50 p-3 text-sm text-green-500">
                  Ticket submitted successfully! We'll get back to you soon.
                </div>
              )}

              <button
                type="submit"
                disabled={loading}
                className="w-full rounded-lg bg-[#357AFF] px-4 py-3 text-base font-medium text-white transition-colors hover:bg-[#2E69DE] focus:outline-none focus:ring-2 focus:ring-[#357AFF] focus:ring-offset-2 disabled:opacity-50"
              >
                {loading ? "Submitting..." : "Submit Ticket"}
              </button>
            </form>
          </div>
        </div>
      </main>

      {!showChat && (
        <button
          onClick={() => setShowChat(true)}
          className="fixed bottom-6 right-6 bg-[#357AFF] text-white rounded-full p-4 shadow-lg hover:bg-[#2E69DE] transition-colors"
        >
          <i className="fas fa-comments text-2xl"></i>
        </button>
      )}

      {showChat && (
        <div className="fixed bottom-6 right-6 w-[350px] bg-white rounded-lg shadow-xl">
          <div className="flex justify-between items-center p-4 border-b border-gray-200">
            <h3 className="font-medium text-gray-900">Live Chat Support</h3>
            <button
              onClick={() => setShowChat(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              <i className="fas fa-times"></i>
            </button>
          </div>
          <div className="h-[400px] p-4 overflow-y-auto">
            <div className="text-center text-gray-500">
              <i className="fas fa-headset text-4xl mb-2"></i>
              <p>Connect with our support team</p>
              <button className="mt-4 px-4 py-2 bg-[#357AFF] text-white rounded-lg hover:bg-[#2E69DE]">
                Start Chat
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({
  defaultPaymentMethodId,
  autoRenewDomains = false,
  paymentReminderDays = 7,
  paymentMethods = [],
  onSubmit,
  loading = false,
  error = null,
}) {
  const [form, setForm] = useState({
    defaultPaymentMethodId: defaultPaymentMethodId || "",
    autoRenewDomains,
    paymentReminderDays: paymentReminderDays.toString(),
  });

  const [errors, setErrors] = useState({});
  const [isDirty, setIsDirty] = useState(false);
  const [success, setSuccess] = useState(false);

  const validateForm = useCallback(() => {
    const newErrors = {};

    if (!form.defaultPaymentMethodId) {
      newErrors.defaultPaymentMethodId = "Please select a payment method";
    }

    const days = parseInt(form.paymentReminderDays);
    if (isNaN(days) || days < 1 || days > 30) {
      newErrors.paymentReminderDays = "Days must be between 1 and 30";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [form]);

  const handleChange = useCallback((name, value) => {
    setForm((prev) => ({ ...prev, [name]: value }));
    setIsDirty(true);
  }, []);

  const handleSubmit = useCallback(
    async (e) => {
      e.preventDefault();
      if (validateForm()) {
        const result = await onSubmit({
          defaultPaymentMethodId: parseInt(form.defaultPaymentMethodId),
          autoRenewDomains: form.autoRenewDomains,
          paymentReminderDays: parseInt(form.paymentReminderDays),
        });

        if (result?.success) {
          setSuccess(true);
          setTimeout(() => setSuccess(false), 3000);
        }
      }
    },
    [form, onSubmit, validateForm]
  );

  const handleReset = useCallback(() => {
    setForm({
      defaultPaymentMethodId: defaultPaymentMethodId || "",
      autoRenewDomains,
      paymentReminderDays: paymentReminderDays.toString(),
    });
    setErrors({});
    setIsDirty(false);
  }, [defaultPaymentMethodId, autoRenewDomains, paymentReminderDays]);

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-6 bg-white rounded-xl shadow-sm p-6"
    >
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Default Payment Method
          </label>
          <select
            value={form.defaultPaymentMethodId}
            onChange={(e) =>
              handleChange("defaultPaymentMethodId", e.target.value)
            }
            className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Select a payment method</option>
            {paymentMethods.map((method) => (
              <option key={method.id} value={method.id}>
                {method.cardBrand} ending in {method.lastFour}
              </option>
            ))}
          </select>
          {errors.defaultPaymentMethodId && (
            <p className="mt-1 text-sm text-red-600">
              {errors.defaultPaymentMethodId}
            </p>
          )}
        </div>

        <div className="py-2">
          <label className="flex items-center space-x-3">
            <input
              type="checkbox"
              checked={form.autoRenewDomains}
              onChange={(e) =>
                handleChange("autoRenewDomains", e.target.checked)
              }
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <span className="text-sm font-medium text-gray-700">
              Auto-renew domains
            </span>
          </label>
          <p className="mt-1 text-sm text-gray-500 ml-7">
            Automatically renew domains before they expire
          </p>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Payment Reminder Days
          </label>
          <input
            type="number"
            value={form.paymentReminderDays}
            onChange={(e) =>
              handleChange("paymentReminderDays", e.target.value)
            }
            min="1"
            max="30"
            className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
          {errors.paymentReminderDays && (
            <p className="mt-1 text-sm text-red-600">
              {errors.paymentReminderDays}
            </p>
          )}
          <p className="mt-1 text-sm text-gray-500">
            Receive reminders this many days before payment is due
          </p>
        </div>
      </div>

      {error && (
        <div className="text-red-600 text-sm">
          <i className="fas fa-exclamation-circle mr-2"></i>
          {error}
        </div>
      )}

      {success && (
        <div className="text-green-600 text-sm">
          <i className="fas fa-check-circle mr-2"></i>
          Preferences saved successfully
        </div>
      )}

      <div className="flex justify-end space-x-4">
        <button
          type="button"
          onClick={handleReset}
          disabled={loading || !isDirty}
          className="px-4 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 transition-colors"
        >
          Reset
        </button>
        <button
          type="submit"
          disabled={loading || !isDirty || Object.keys(errors).length > 0}
          className="px-4 py-2 text-white bg-[#357AFF] rounded-lg hover:bg-[#2E69DE] disabled:opacity-50 transition-colors flex items-center"
        >
          {loading ? (
            <>
              <i className="fas fa-spinner fa-spin mr-2"></i>
              Saving...
            </>
          ) : (
            "Save Changes"
          )}
        </button>
      </div>
    </form>
  );
}

function StoryComponent() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const mockPaymentMethods = [
    { id: 1, cardBrand: "Visa", lastFour: "4242" },
    { id: 2, cardBrand: "Mastercard", lastFour: "8888" },
  ];

  const handleSubmit = async (data) => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch("/api/update-payment-preferences", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to save changes");
      }

      return result;
    } catch (err) {
      setError(err.message);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-8 max-w-2xl mx-auto space-y-8">
      <div>
        <h2 className="text-lg font-semibold mb-4">Default State</h2>
        <MainComponent
          paymentMethods={mockPaymentMethods}
          onSubmit={handleSubmit}
        />
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">With Initial Values</h2>
        <MainComponent
          defaultPaymentMethodId={1}
          autoRenewDomains={true}
          paymentReminderDays={14}
          paymentMethods={mockPaymentMethods}
          onSubmit={handleSubmit}
        />
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">Loading State</h2>
        <MainComponent
          paymentMethods={mockPaymentMethods}
          onSubmit={handleSubmit}
          loading={true}
        />
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">Error State</h2>
        <MainComponent
          paymentMethods={mockPaymentMethods}
          onSubmit={handleSubmit}
          error="Failed to save changes. Please try again."
        />
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({ label, description, checked, onChange }) {
  return (
    <div className="flex items-center justify-between py-4">
      <div>
        <h3 className="text-sm font-medium text-gray-900">{label}</h3>
        {description && <p className="text-sm text-gray-500">{description}</p>}
      </div>
      <button
        type="button"
        className={`${
          checked ? "bg-blue-600" : "bg-gray-200"
        } relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}
        role="switch"
        aria-checked={checked}
        onClick={() => onChange(!checked)}
      >
        <span
          aria-hidden="true"
          className={`${
            checked ? "translate-x-5" : "translate-x-0"
          } pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}
        />
      </button>
    </div>
  );
}

function StoryComponent() {
  const [isEnabled, setIsEnabled] = useState(false);
  const [isNotifications, setIsNotifications] = useState(true);
  const [isDarkMode, setIsDarkMode] = useState(false);

  return (
    <div className="p-6 space-y-6">
      <div>
        <h2 className="text-lg font-semibold mb-4">Basic Toggle</h2>
        <MainComponent
          checked={isEnabled}
          onChange={setIsEnabled}
          label="Enable feature"
        />
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">Toggle with Description</h2>
        <MainComponent
          checked={isNotifications}
          onChange={setIsNotifications}
          label="Notifications"
          description="Receive notifications when someone mentions you"
        />
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">Initially Off Toggle</h2>
        <MainComponent
          checked={isDarkMode}
          onChange={setIsDarkMode}
          label="Dark Mode"
          description="Switch to dark theme for better viewing at night"
        />
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({ label, error, children }) {
  return (
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        {label}
      </label>
      {children}
      {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
    </div>
  );
}

function StoryComponent() {
  return (
    <div className="p-4 space-y-8">
      <div>
        <h2 className="text-lg font-semibold mb-4">Basic Text Input</h2>
        <MainComponent label="Username">
          <input
            type="text"
            className="w-full rounded-lg border border-gray-200 p-3"
            placeholder="johndoe"
          />
        </MainComponent>
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">Required Field</h2>
        <MainComponent label="Email">
          <input
            type="email"
            className="w-full rounded-lg border border-gray-200 p-3"
            placeholder="john@example.com"
            required
          />
        </MainComponent>
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">With Error</h2>
        <MainComponent
          label="Password"
          error="Password must be at least 8 characters"
        >
          <input
            type="password"
            className="w-full rounded-lg border border-red-300 p-3"
            placeholder="Enter your password"
          />
        </MainComponent>
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">Select Input</h2>
        <MainComponent label="Country">
          <select className="w-full rounded-lg border border-gray-200 p-3">
            <option value="">Select a country</option>
            <option value="us">United States</option>
            <option value="uk">United Kingdom</option>
            <option value="ca">Canada</option>
          </select>
        </MainComponent>
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-4">Textarea</h2>
        <MainComponent label="Bio">
          <textarea
            className="w-full rounded-lg border border-gray-200 p-3"
            rows="4"
            placeholder="Write your bio here..."
          />
        </MainComponent>
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({ title, children }) {
  return (
    <div className="bg-white shadow rounded-lg p-6 mb-6">
      {title && (
        <h3 className="text-lg font-medium text-gray-900 mb-4">{title}</h3>
      )}
      {children}
    </div>
  );
}

function StoryComponent() {
  return (
    <div className="p-4 space-y-8">
      <MainComponent title="Basic Section">
        <p className="text-gray-600">
          This is a basic settings section with just content.
        </p>
      </MainComponent>

      <MainComponent title="Form Fields">
        <div className="space-y-4">
          <input
            type="text"
            placeholder="Username"
            className="w-full rounded-lg border border-gray-200 p-3"
          />
          <input
            type="email"
            placeholder="Email"
            className="w-full rounded-lg border border-gray-200 p-3"
          />
        </div>
      </MainComponent>

      <MainComponent>
        <p className="text-gray-600">This section has no title.</p>
      </MainComponent>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({
  data,
  type = "line",
  title = "Profit Overview",
  loading = false,
  error = null,
  timeframe = "monthly",
}) {
  const [chartData, setChartData] = useState(null);

  useEffect(() => {
    if (!data) return;

    const processedData = Object.entries(data).map(([period, details]) => ({
      period,
      revenue: details.periodTotals.revenue,
      profit: details.periodTotals.profit,
      transactions: details.periodTotals.transactions,
    }));

    setChartData(processedData);
  }, [data]);

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 w-full">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="h-[400px] bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 w-full">
        <div className="text-red-500 font-roboto">
          <i className="fas fa-exclamation-circle mr-2"></i>
          {error}
        </div>
      </div>
    );
  }

  if (!chartData) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 w-full">
        <div className="text-gray-500 font-roboto">No data available</div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md p-6 w-full">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold font-roboto">{title}</h2>
        <div className="text-sm text-gray-500 font-roboto">
          {timeframe.charAt(0).toUpperCase() + timeframe.slice(1)} View
        </div>
      </div>

      <div className="h-[400px] relative">
        {type === "line" && (
          <div className="w-full h-full">
            {chartData.map((point, index) => {
              const x = (index / (chartData.length - 1)) * 100;
              const y =
                100 -
                (point.profit / Math.max(...chartData.map((d) => d.profit))) *
                  100;

              return (
                <div
                  key={point.period}
                  className="absolute w-2 h-2 bg-blue-600 rounded-full transform -translate-x-1 -translate-y-1"
                  style={{
                    left: `${x}%`,
                    top: `${y}%`,
                  }}
                >
                  <div className="opacity-0 hover:opacity-100 absolute bottom-full mb-2 -left-20 w-40">
                    <div className="bg-gray-800 text-white p-2 rounded text-xs font-roboto">
                      <div>Period: {point.period}</div>
                      <div>Profit: ${point.profit.toLocaleString()}</div>
                      <div>Revenue: ${point.revenue.toLocaleString()}</div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}

        {type === "bar" && (
          <div className="flex items-end h-full space-x-4">
            {chartData.map((bar) => {
              const height =
                (bar.profit / Math.max(...chartData.map((d) => d.profit))) *
                100;

              return (
                <div key={bar.period} className="flex-1 group relative">
                  <div
                    className="bg-blue-600 hover:bg-blue-700 transition-colors w-full rounded-t"
                    style={{ height: `${height}%` }}
                  >
                    <div className="opacity-0 group-hover:opacity-100 absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2">
                      <div className="bg-gray-800 text-white p-2 rounded text-xs whitespace-nowrap font-roboto">
                        <div>Period: {bar.period}</div>
                        <div>Profit: ${bar.profit.toLocaleString()}</div>
                        <div>Revenue: ${bar.revenue.toLocaleString()}</div>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      <div className="mt-6 grid grid-cols-3 gap-4">
        <div className="text-center">
          <div className="text-sm text-gray-500 font-roboto">Total Revenue</div>
          <div className="text-xl font-semibold font-roboto">
            ${chartData.reduce((sum, d) => sum + d.revenue, 0).toLocaleString()}
          </div>
        </div>
        <div className="text-center">
          <div className="text-sm text-gray-500 font-roboto">Total Profit</div>
          <div className="text-xl font-semibold text-blue-600 font-roboto">
            ${chartData.reduce((sum, d) => sum + d.profit, 0).toLocaleString()}
          </div>
        </div>
        <div className="text-center">
          <div className="text-sm text-gray-500 font-roboto">
            Total Transactions
          </div>
          <div className="text-xl font-semibold font-roboto">
            {chartData
              .reduce((sum, d) => sum + d.transactions, 0)
              .toLocaleString()}
          </div>
        </div>
      </div>
    </div>
  );
}

function StoryComponent() {
  const sampleData = {
    "2025-01": {
      periodTotals: {
        revenue: 150000,
        profit: 45000,
        transactions: 1200,
      },
    },
    "2025-02": {
      periodTotals: {
        revenue: 180000,
        profit: 54000,
        transactions: 1500,
      },
    },
    "2025-03": {
      periodTotals: {
        revenue: 220000,
        profit: 66000,
        transactions: 1800,
      },
    },
  };

  return (
    <div className="p-8 bg-gray-100 space-y-8">
      <div className="max-w-4xl mx-auto">
        <h3 className="text-lg font-semibold mb-4 font-roboto">Line Chart</h3>
        <MainComponent
          data={sampleData}
          type="line"
          title="Monthly Profit Trends"
          timeframe="monthly"
        />
      </div>

      <div className="max-w-4xl mx-auto">
        <h3 className="text-lg font-semibold mb-4 font-roboto">Bar Chart</h3>
        <MainComponent
          data={sampleData}
          type="bar"
          title="Quarterly Revenue Analysis"
          timeframe="quarterly"
        />
      </div>

      <div className="max-w-4xl mx-auto">
        <h3 className="text-lg font-semibold mb-4 font-roboto">
          Loading State
        </h3>
        <MainComponent loading={true} />
      </div>

      <div className="max-w-4xl mx-auto">
        <h3 className="text-lg font-semibold mb-4 font-roboto">Error State</h3>
        <MainComponent error="Failed to load profit data" />
      </div>

      <div className="max-w-4xl mx-auto">
        <h3 className="text-lg font-semibold mb-4 font-roboto">
          No Data State
        </h3>
        <MainComponent data={null} />
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({ domainName, onEstimateComplete }) {
  const [value, setValue] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [domain, setDomain] = useState(domainName || "");

  const analyzeDomain = async (domainToAnalyze) => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch("/api/analyze-domain-value", {
        method: "POST",
        body: JSON.stringify({ domainName: domainToAnalyze }),
      });

      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }

      const data = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      setValue(data);
      if (onEstimateComplete) {
        onEstimateComplete(data);
      }
    } catch (err) {
      setError(err.message);
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (domain) {
      analyzeDomain(domain);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 w-full max-w-2xl">
      <h2 className="text-2xl font-semibold mb-6 font-roboto">
        Domain Value Estimator
      </h2>

      <form onSubmit={handleSubmit} className="mb-6">
        <div className="flex gap-4">
          <input
            type="text"
            value={domain}
            onChange={(e) => setDomain(e.target.value)}
            placeholder="Enter domain name (e.g., example.com)"
            className="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-roboto"
            name="domain"
          />
          <button
            type="submit"
            disabled={loading || !domain}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-300 font-roboto"
          >
            {loading ? <i className="fas fa-spinner fa-spin"></i> : "Analyze"}
          </button>
        </div>
      </form>

      {error && (
        <div className="text-red-500 mb-4 font-roboto">
          <i className="fas fa-exclamation-circle mr-2"></i>
          {error}
        </div>
      )}

      {value && (
        <div className="space-y-6">
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4 font-roboto">
              Domain Factors
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="font-roboto">
                <span className="text-gray-600">Length:</span>{" "}
                {value.factors.length} characters
              </div>
              <div className="font-roboto">
                <span className="text-gray-600">Length Score:</span>{" "}
                {(value.factors.lengthScore * 100).toFixed(0)}%
              </div>
              <div className="font-roboto">
                <span className="text-gray-600">Quality Score:</span>{" "}
                {(value.factors.qualityScore * 100).toFixed(0)}%
              </div>
              <div className="font-roboto">
                <span className="text-gray-600">Market Trend:</span>{" "}
                {value.factors.marketTrend}
              </div>
            </div>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="text-lg font-semibold mb-4 font-roboto">
              Estimated Values
            </h3>
            <div className="space-y-4">
              {value.valuations.map((v) => (
                <div
                  key={v.extension}
                  className="flex justify-between items-center border-b pb-2"
                >
                  <span className="font-roboto">{v.extension}</span>
                  <div className="text-right">
                    <div className="text-xl font-bold text-blue-600 font-roboto">
                      ${v.estimatedValue.toLocaleString()}
                    </div>
                    <div className="text-sm text-gray-500 font-roboto">
                      {v.confidence}% confidence
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function StoryComponent() {
  return (
    <div className="p-8 bg-gray-100 space-y-8">
      <MainComponent />

      <MainComponent
        domainName="example.com"
        onEstimateComplete={(data) => console.log("Estimate completed:", data)}
      />

      <div className="max-w-2xl">
        <h3 className="text-lg font-semibold mb-4 font-roboto">
          With Pre-filled Results
        </h3>
        <MainComponent
          domainName="google.com"
          value={{
            factors: {
              length: 6,
              lengthScore: 0.9,
              qualityScore: 1.0,
              marketTrend: "up",
            },
            valuations: [
              { extension: ".com", estimatedValue: 1000000, confidence: 95 },
              { extension: ".net", estimatedValue: 50000, confidence: 85 },
              { extension: ".org", estimatedValue: 25000, confidence: 80 },
            ],
          }}
        />
      </div>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({ extension, breakdown, total, isLoading, error }) {
  if (isLoading) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 w-full max-w-md">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-200 rounded w-1/4"></div>
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 w-full max-w-md">
        <div className="text-red-500 font-roboto">
          <i className="fas fa-exclamation-circle mr-2"></i>
          {error}
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md p-6 w-full max-w-md">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold font-roboto">Price Breakdown</h2>
        <span className="text-gray-600 font-roboto">{extension}</span>
      </div>

      <div className="space-y-4">
        <div className="flex justify-between items-center py-2 border-b">
          <span className="text-gray-600 font-roboto">Registry Fee</span>
          <span className="font-medium font-roboto">
            ${breakdown?.registryFee.toFixed(2)}
          </span>
        </div>

        <div className="flex justify-between items-center py-2 border-b">
          <span className="text-gray-600 font-roboto">ICANN Fee</span>
          <span className="font-medium font-roboto">
            ${breakdown?.icannFee.toFixed(2)}
          </span>
        </div>

        <div className="flex justify-between items-center py-2 border-b">
          <span className="text-gray-600 font-roboto">Operational Cost</span>
          <span className="font-medium font-roboto">
            ${breakdown?.ourCost.toFixed(2)}
          </span>
        </div>

        <div className="flex justify-between items-center py-2 border-b">
          <span className="text-gray-600 font-roboto">Profit Margin</span>
          <span className="font-medium font-roboto">
            {breakdown?.profitMargin}%
          </span>
        </div>

        <div className="flex justify-between items-center pt-4">
          <span className="text-lg font-semibold font-roboto">Total</span>
          <span className="text-lg font-bold text-[#2563eb] font-roboto">
            ${total?.toFixed(2)}
          </span>
        </div>
      </div>
    </div>
  );
}

function StoryComponent() {
  const sampleData = {
    extension: ".com",
    breakdown: {
      registryFee: 8.99,
      icannFee: 0.18,
      ourCost: 2.0,
      profitMargin: 15,
    },
    total: 12.99,
  };

  return (
    <div className="p-8 bg-gray-100 space-y-8">
      <MainComponent {...sampleData} />

      <MainComponent isLoading={true} />

      <MainComponent error="Failed to load price breakdown" />

      <MainComponent
        extension=".net"
        breakdown={{
          registryFee: 10.99,
          icannFee: 0.18,
          ourCost: 2.5,
          profitMargin: 20,
        }}
        total={15.99}
      />
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent({
  method = {
    id: "",
    card_brand: "",
    last_four: "",
    expiry_month: "",
    expiry_year: "",
    is_default: false,
  },
  isSelected = false,
  onSelect = () => {},
  onDelete = () => {},
  onMakeDefault = () => {},
  disabled = false,
}) {
  const getBrandIcon = (brand) => {
    const brands = {
      visa: "fa-brands fa-cc-visa",
      mastercard: "fa-brands fa-cc-mastercard",
      amex: "fa-brands fa-cc-amex",
      discover: "fa-brands fa-cc-discover",
      default: "fa-regular fa-credit-card",
    };
    return brands[brand.toLowerCase()] || brands.default;
  };

  return (
    <div
      className={`bg-white rounded-xl shadow-sm border p-4 w-full cursor-pointer ${
        isSelected ? "border-[#357AFF] bg-blue-50" : "border-gray-100"
      }`}
      onClick={() => !disabled && onSelect(method.id)}
    >
      <div className="flex justify-between items-start">
        <div className="flex items-center gap-3">
          <input
            type="radio"
            checked={isSelected}
            onChange={() => !disabled && onSelect(method.id)}
            className="h-4 w-4 text-[#357AFF]"
            disabled={disabled}
          />
          <i
            className={`text-2xl ${getBrandIcon(
              method.card_brand
            )} text-gray-700`}
          ></i>
          <div>
            <div className="flex items-center gap-2">
              <span className="font-medium text-gray-900">
                •••• {method.last_four}
              </span>
              {method.is_default && (
                <span className="bg-[#357AFF] text-white text-xs px-2 py-1 rounded-full">
                  Default
                </span>
              )}
            </div>
            <div className="text-sm text-gray-500">
              Expires {method.expiry_month}/{method.expiry_year}
            </div>
          </div>
        </div>

        <div className="flex items-center gap-2">
          {!method.is_default && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                onMakeDefault();
              }}
              disabled={disabled}
              className="text-sm px-3 py-1.5 text-[#357AFF] hover:bg-blue-50 rounded-lg transition-colors disabled:opacity-50"
            >
              Make Default
            </button>
          )}
          <button
            onClick={(e) => {
              e.stopPropagation();
              onDelete();
            }}
            disabled={disabled}
            className="text-sm px-3 py-1.5 text-red-600 hover:bg-red-50 rounded-lg transition-colors disabled:opacity-50"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
}

function StoryComponent() {
  const [selectedId, setSelectedId] = useState("1");

  const mockMethods = [
    {
      id: "1",
      card_brand: "visa",
      last_four: "4242",
      expiry_month: "12",
      expiry_year: "25",
      is_default: true,
    },
    {
      id: "2",
      card_brand: "mastercard",
      last_four: "8888",
      expiry_month: "03",
      expiry_year: "26",
      is_default: false,
    },
    {
      id: "3",
      card_brand: "amex",
      last_four: "1234",
      expiry_month: "09",
      expiry_year: "24",
      is_default: false,
    },
    {
      id: "4",
      card_brand: "discover",
      last_four: "9999",
      expiry_month: "11",
      expiry_year: "27",
      is_default: false,
    },
  ];

  return (
    <div className="p-8 space-y-4 max-w-xl mx-auto">
      {mockMethods.map((method) => (
        <MainComponent
          key={method.id}
          method={method}
          isSelected={selectedId === method.id}
          onSelect={setSelectedId}
          disabled={method.id === "3"}
        />
      ))}
    </div>
  );
}

export default MainComponent;
async function handler({
    paymentReminderDays,
    minimumPayoutAmount,
    payoutFrequency,
  }) {
    const errors = {};
  
    if (
      typeof paymentReminderDays !== "number" ||
      paymentReminderDays < 1 ||
      paymentReminderDays > 30
    ) {
      errors.paymentReminderDays =
        "Payment reminder days must be between 1 and 30";
    }
  
    if (typeof minimumPayoutAmount !== "number" || minimumPayoutAmount <= 0) {
      errors.minimumPayoutAmount = "Minimum payout amount must be greater than 0";
    }
  
    if (!payoutFrequency || !["weekly", "monthly"].includes(payoutFrequency)) {
      errors.payoutFrequency =
        "Payout frequency must be either weekly or monthly";
    }
  
    if (Object.keys(errors).length > 0) {
      return {
        success: false,
        errors,
      };
    }
  
    return {
      success: true,
    };
  }
  async function handler() {
    const session = getSession();
  
    if (!session?.user?.id) {
      return {
        error: "Not authenticated",
      };
    }
  
    const [userSettings] = await sql`
      SELECT 
        name,
        email,
        payout_frequency,
        minimum_payout_amount,
        notification_preferences,
        payment_reminder_days,
        auto_renew_domains,
        default_payment_method_id
      FROM auth_users 
      WHERE id = ${session.user.id}
    `;
  
    if (!userSettings) {
      return {
        error: "User not found",
      };
    }
  
    return {
      success: true,
      settings: {
        name: userSettings.name,
        email: userSettings.email,
        payoutPreferences: {
          frequency: userSettings.payout_frequency,
          minimumAmount: userSettings.minimum_payout_amount,
        },
        notificationPreferences: userSettings.notification_preferences,
        paymentPreferences: {
          reminderDays: userSettings.payment_reminder_days,
          autoRenewDomains: userSettings.auto_renew_domains,
          defaultPaymentMethodId: userSettings.default_payment_method_id,
        },
      },
    };
  }
  async function handler() {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      const result = await sql`
        SELECT 
          default_payment_method_id,
          auto_renew_domains,
          payment_reminder_days
        FROM auth_users 
        WHERE id = ${session.user.id}
      `;
  
      if (!result.length) {
        return { error: "User not found" };
      }
  
      return {
        preferences: {
          defaultPaymentMethodId: result[0].default_payment_method_id,
          autoRenewDomains: result[0].auto_renew_domains,
          paymentReminderDays: result[0].payment_reminder_days,
        },
      };
    } catch (error) {
      return { error: "Failed to fetch payment preferences" };
    }
  }
  async function handler() {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      const result = await sql`
        SELECT 
          payout_frequency,
          minimum_payout_amount
        FROM auth_users 
        WHERE id = ${session.user.id}
      `;
  
      if (!result.length) {
        return { error: "User not found" };
      }
  
      return {
        preferences: {
          payoutFrequency: result[0].payout_frequency,
          minimumPayoutAmount: result[0].minimum_payout_amount,
        },
      };
    } catch (error) {
      return { error: "Failed to fetch payout preferences" };
    }
  }
  async function handler() {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      const result = await sql`
        SELECT 
          notification_preferences,
          payout_frequency,
          minimum_payout_amount,
          default_payment_method_id,
          auto_renew_domains,
          payment_reminder_days,
          updated_at,
          last_payment_preferences_update
        FROM auth_users 
        WHERE id = ${session.user.id}
      `;
  
      if (!result.length) {
        return { error: "User not found" };
      }
  
      let paymentMethodDetails = null;
      if (result[0].default_payment_method_id) {
        const paymentMethod = await sql`
          SELECT id, last_four, card_brand
          FROM payment_methods
          WHERE id = ${result[0].default_payment_method_id}
        `;
        if (paymentMethod.length) {
          paymentMethodDetails = paymentMethod[0];
        }
      }
  
      return {
        success: true,
        preferences: {
          notifications: result[0].notification_preferences,
          payout: {
            frequency: result[0].payout_frequency,
            minimumAmount: result[0].minimum_payout_amount,
          },
          payment: {
            defaultPaymentMethodId: result[0].default_payment_method_id,
            paymentMethod: paymentMethodDetails,
            autoRenewDomains: result[0].auto_renew_domains,
            paymentReminderDays: result[0].payment_reminder_days,
            lastUpdated: result[0].last_payment_preferences_update,
          },
        },
      };
    } catch (error) {
      return {
        success: false,
        error: "Failed to fetch account preferences",
      };
    }
  }
  async function handler({ email, browser, paymentReminders, domainExpiry }) {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      const currentPrefs = await sql`
        SELECT notification_preferences 
        FROM auth_users 
        WHERE id = ${session.user.id}
      `;
  
      const existingPrefs = currentPrefs[0].notification_preferences;
      const newPrefs = {
        ...existingPrefs,
        ...(email !== undefined && { email }),
        ...(browser !== undefined && { browser }),
        ...(paymentReminders !== undefined && {
          payment_reminders: paymentReminders,
        }),
        ...(domainExpiry !== undefined && { domain_expiry: domainExpiry }),
      };
  
      const result = await sql`
        UPDATE auth_users
        SET notification_preferences = ${JSON.stringify(newPrefs)}::jsonb
        WHERE id = ${session.user.id}
        RETURNING notification_preferences
      `;
  
      return {
        message: "Notification preferences updated successfully",
        preferences: result[0].notification_preferences,
      };
    } catch (error) {
      return { error: "Failed to update notification preferences" };
    }
  }
  async function handler({ payoutFrequency, minimumPayoutAmount }) {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      const validFrequencies = ["weekly", "monthly", "quarterly"];
      if (payoutFrequency && !validFrequencies.includes(payoutFrequency)) {
        return { error: "Invalid payout frequency" };
      }
  
      if (minimumPayoutAmount && minimumPayoutAmount < 1) {
        return { error: "Minimum payout amount must be at least 1" };
      }
  
      const result = await sql`
        UPDATE auth_users
        SET 
          payout_frequency = COALESCE(${payoutFrequency}, payout_frequency),
          minimum_payout_amount = COALESCE(${minimumPayoutAmount}, minimum_payout_amount)
        WHERE id = ${session.user.id}
        RETURNING payout_frequency, minimum_payout_amount
      `;
  
      return {
        message: "Payout preferences updated successfully",
        preferences: {
          payoutFrequency: result[0].payout_frequency,
          minimumPayoutAmount: result[0].minimum_payout_amount,
        },
      };
    } catch (error) {
      return { error: "Failed to update payout preferences" };
    }
  }
  async function handler({ domainName }) {
    if (!domainName) {
      return { error: "Domain name is required" };
    }
  
    try {
      // Get base pricing data for common extensions
      const extensionPrices = await sql`
        SELECT extension, selling_price, market_value_estimate 
        FROM domain_price_breakdown 
        WHERE extension IN ('.com', '.net', '.org')
      `;
  
      // Get market trends
      const marketTrends = await sql`
        SELECT category, avg_sale_price, demand_score, trend_direction 
        FROM domain_market_analytics 
        WHERE updated_at > NOW() - INTERVAL '30 days'
      `;
  
      // Get recent sales data
      const recentSales = await sql`
        SELECT dt.amount, d.name, d.extension
        FROM domain_transactions dt
        JOIN domains d ON dt.domain_id = d.id
        WHERE dt.transaction_date > NOW() - INTERVAL '90 days'
        AND dt.status = 'completed'
        ORDER BY dt.transaction_date DESC
        LIMIT 50
      `;
  
      // Calculate base value factors
      const length = domainName.length;
      const hasHyphen = domainName.includes("-");
      const hasNumber = /\d/.test(domainName);
      const isAllLetters = /^[a-zA-Z]+$/.test(domainName);
  
      // Length factor (shorter domains are typically more valuable)
      const lengthFactor = Math.max(0.5, (10 - length) / 5);
  
      // Quality factors
      const qualityMultiplier =
        (isAllLetters ? 1.2 : 1.0) *
        (hasHyphen ? 0.8 : 1.0) *
        (hasNumber ? 0.9 : 1.0);
  
      // Calculate average market prices
      const avgMarketPrice =
        marketTrends.reduce(
          (sum, trend) => sum + Number(trend.avg_sale_price),
          0
        ) / marketTrends.length;
  
      // Calculate average recent sale price
      const avgRecentSale =
        recentSales.reduce((sum, sale) => sum + Number(sale.amount), 0) /
        recentSales.length;
  
      // Calculate base value for each extension
      const valuations = extensionPrices.map((ext) => {
        const basePrice = Number(ext.selling_price);
        const marketValue = Number(ext.market_value_estimate) || basePrice;
  
        const estimatedValue =
          basePrice *
          lengthFactor *
          qualityMultiplier *
          (marketValue / basePrice) *
          (avgRecentSale / avgMarketPrice);
  
        return {
          extension: ext.extension,
          estimatedValue: Math.round(estimatedValue * 100) / 100,
          confidence: calculateConfidence(
            length,
            qualityMultiplier,
            marketTrends
          ),
        };
      });
  
      return {
        domainName,
        factors: {
          length,
          lengthScore: lengthFactor,
          qualityScore: qualityMultiplier,
          marketTrend: marketTrends[0]?.trend_direction || "stable",
          avgMarketPrice,
          avgRecentSale,
        },
        valuations,
      };
    } catch (error) {
      return { error: "Failed to estimate domain value" };
    }
  }
  
  function calculateConfidence(length, quality, marketTrends) {
    const lengthConfidence = length >= 3 && length <= 15 ? 1 : 0.7;
    const qualityConfidence = quality >= 1 ? 1 : 0.8;
    const marketConfidence = marketTrends.length > 0 ? 1 : 0.6;
  
    const overallConfidence =
      (lengthConfidence + qualityConfidence + marketConfidence) / 3;
    return Math.round(overallConfidence * 100);
  }
  async function handler({ startDate, endDate, groupBy = "month" }) {
    if (!startDate || !endDate) {
      return {
        error: "Start date and end date are required",
      };
    }
  
    try {
      const query = `
        SELECT 
          d.extension,
          dt.transaction_date,
          SUM(dt.amount) as revenue,
          SUM(dt.registry_fee) as total_registry_fees,
          SUM(dt.icann_fee) as total_icann_fees,
          SUM(dt.our_cost) as total_costs,
          SUM(dt.profit) as total_profit,
          COUNT(*) as transaction_count,
          date_trunc($1, dt.transaction_date) as period
        FROM domain_transactions dt
        JOIN domains d ON dt.domain_id = d.id
        WHERE dt.transaction_date BETWEEN $2 AND $3
        AND dt.status = 'completed'
        GROUP BY d.extension, date_trunc($1, dt.transaction_date)
        ORDER BY period DESC, d.extension
      `;
  
      const results = await sql(query, [groupBy, startDate, endDate]);
  
      // Calculate overall totals
      const totals = {
        revenue: 0,
        costs: 0,
        profit: 0,
        transactions: 0,
      };
  
      // Process results by period and extension
      const reportByPeriod = {};
  
      results.forEach((row) => {
        const period = row.period.toISOString().split("T")[0];
        const extension = row.extension;
  
        if (!reportByPeriod[period]) {
          reportByPeriod[period] = {
            extensions: {},
            periodTotals: {
              revenue: 0,
              costs: 0,
              profit: 0,
              transactions: 0,
            },
          };
        }
  
        const extensionData = {
          revenue: Number(row.revenue),
          registryFees: Number(row.total_registry_fees),
          icannFees: Number(row.total_icann_fees),
          operationalCosts: Number(row.total_costs),
          profit: Number(row.total_profit),
          transactions: Number(row.transaction_count),
          margin: (
            (Number(row.total_profit) / Number(row.revenue)) *
            100
          ).toFixed(2),
        };
  
        reportByPeriod[period].extensions[extension] = extensionData;
  
        // Update period totals
        reportByPeriod[period].periodTotals.revenue += extensionData.revenue;
        reportByPeriod[period].periodTotals.costs +=
          extensionData.registryFees +
          extensionData.icannFees +
          extensionData.operationalCosts;
        reportByPeriod[period].periodTotals.profit += extensionData.profit;
        reportByPeriod[period].periodTotals.transactions +=
          extensionData.transactions;
  
        // Update overall totals
        totals.revenue += extensionData.revenue;
        totals.costs +=
          extensionData.registryFees +
          extensionData.icannFees +
          extensionData.operationalCosts;
        totals.profit += extensionData.profit;
        totals.transactions += extensionData.transactions;
      });
  
      return {
        summary: {
          totalRevenue: totals.revenue,
          totalCosts: totals.costs,
          totalProfit: totals.profit,
          totalTransactions: totals.transactions,
          overallMargin: ((totals.profit / totals.revenue) * 100).toFixed(2),
          startDate,
          endDate,
          groupBy,
        },
        detailedReport: reportByPeriod,
      };
    } catch (error) {
      return {
        error: "Failed to generate profit report",
      };
    }
  }
  async function handler({ extension }) {
    if (!extension) {
      return {
        error: "Extension is required (e.g. .com, .net, .org)",
      };
    }
  
    try {
      const priceData = await sql`
        SELECT 
          extension,
          registry_fee,
          icann_fee,
          our_cost,
          selling_price,
          profit_margin
        FROM domain_price_breakdown 
        WHERE extension = ${extension}
      `;
  
      if (!priceData.length) {
        return {
          error: "No pricing data available for this extension",
        };
      }
  
      const breakdown = priceData[0];
  
      return {
        extension: breakdown.extension,
        breakdown: {
          registryFee: Number(breakdown.registry_fee),
          icannFee: Number(breakdown.icann_fee),
          ourCost: Number(breakdown.our_cost),
          sellingPrice: Number(breakdown.selling_price),
          profitMargin: Number(breakdown.profit_margin),
        },
        total: Number(breakdown.selling_price),
      };
    } catch (error) {
      return {
        error: "Failed to retrieve price breakdown",
      };
    }
  }
  async function handler({ domainName, extension }) {
    if (!domainName || !extension) {
      return {
        error: "Domain name and extension are required",
      };
    }
  
    try {
      // Get market analytics for the domain category
      const marketData = await sql`
        SELECT * FROM domain_market_analytics 
        WHERE category = ${extension}
        ORDER BY updated_at DESC 
        LIMIT 1
      `;
  
      // Get current price breakdown for the extension
      const priceData = await sql`
        SELECT * FROM domain_price_breakdown 
        WHERE extension = ${extension}
      `;
  
      // Get recent transactions for similar domains
      const recentTransactions = await sql`
        SELECT dt.* 
        FROM domain_transactions dt
        JOIN domains d ON dt.domain_id = d.id
        WHERE d.extension = ${extension}
        AND dt.transaction_date > NOW() - INTERVAL '30 days'
        AND dt.status = 'completed'
        ORDER BY dt.transaction_date DESC
        LIMIT 10
      `;
  
      if (!priceData.length) {
        return {
          error: "No pricing data available for this extension",
        };
      }
  
      const basePrice =
        priceData[0].registry_fee +
        priceData[0].icann_fee +
        priceData[0].our_cost;
      const marketTrends = marketData.length ? marketData[0] : null;
  
      // Calculate average transaction price
      const avgTransactionPrice = recentTransactions.length
        ? recentTransactions.reduce((sum, t) => sum + Number(t.amount), 0) /
          recentTransactions.length
        : 0;
  
      // Calculate suggested price based on market data and recent transactions
      let suggestedPrice = basePrice;
  
      if (marketTrends) {
        // Adjust based on demand score (0-100)
        const demandMultiplier = 1 + marketTrends.demand_score / 100;
        suggestedPrice *= demandMultiplier;
  
        // Adjust based on market trend direction
        if (marketTrends.trend_direction === "up") {
          suggestedPrice *= 1.1;
        } else if (marketTrends.trend_direction === "down") {
          suggestedPrice *= 0.9;
        }
      }
  
      // Factor in recent transaction prices
      if (avgTransactionPrice > 0) {
        suggestedPrice = (suggestedPrice + avgTransactionPrice) / 2;
      }
  
      return {
        domainName,
        extension,
        analysis: {
          baseCost: basePrice,
          marketDemand: marketTrends?.demand_score || 0,
          marketTrend: marketTrends?.trend_direction || "stable",
          averageMarketPrice: marketTrends?.avg_sale_price || 0,
          recentTransactionAverage: avgTransactionPrice,
          suggestedPrice: Math.round(suggestedPrice * 100) / 100,
        },
        recentTransactions: recentTransactions.map((t) => ({
          date: t.transaction_date,
          amount: t.amount,
        })),
      };
    } catch (error) {
      return {
        error: "Failed to analyze domain pricing",
      };
    }
  }
  async function handler({ name, email, subject, message }) {
    const session = getSession();
    const userId = session?.user?.id || null;
  
    if (!name || !email || !subject || !message) {
      return { error: "All fields are required" };
    }
  
    if (!email.includes("@")) {
      return { error: "Invalid email address" };
    }
  
    try {
      const result = await sql`
        INSERT INTO contact_messages 
        (user_id, name, email, subject, message, status)
        VALUES 
        (${userId}, ${name}, ${email}, ${subject}, ${message}, 'pending')
        RETURNING *
      `;
  
      return {
        success: true,
        message: result[0],
      };
    } catch (error) {
      return { error: "Failed to submit contact message" };
    }
  }
  async function handler({ search, category, page = 1, limit = 10 }) {
    const offset = (page - 1) * limit;
    let queryParts = ["SELECT * FROM help_articles WHERE 1=1"];
    let values = [];
    let paramCount = 0;
  
    if (search) {
      paramCount++;
      queryParts.push(
        `AND (LOWER(title) LIKE LOWER($${paramCount}) OR LOWER(content) LIKE LOWER($${paramCount}))`
      );
      values.push(`%${search}%`);
    }
  
    if (category) {
      paramCount++;
      queryParts.push(`AND category = $${paramCount}`);
      values.push(category);
    }
  
    queryParts.push("ORDER BY created_at DESC");
    paramCount++;
    queryParts.push(`LIMIT $${paramCount}`);
    values.push(limit);
  
    paramCount++;
    queryParts.push(`OFFSET $${paramCount}`);
    values.push(offset);
  
    try {
      const [articles, countResult] = await sql.transaction([
        sql(queryParts.join(" "), values),
        sql("SELECT COUNT(*) FROM help_articles", []),
      ]);
  
      const totalCount = parseInt(countResult[0].count);
      const totalPages = Math.ceil(totalCount / limit);
  
      return {
        articles,
        pagination: {
          currentPage: page,
          totalPages,
          totalItems: totalCount,
          itemsPerPage: limit,
        },
      };
    } catch (error) {
      return { error: "Failed to fetch help articles" };
    }
  }
  async function handler({ notificationId }) {
    const session = getSession();
  
    if (!session?.user?.id) {
      return { error: "Not authenticated" };
    }
  
    if (!notificationId) {
      return { error: "Notification ID is required" };
    }
  
    try {
      const result = await sql`
        UPDATE notifications 
        SET read = true 
        WHERE id = ${notificationId} 
        AND user_id = ${session.user.id}
        RETURNING *
      `;
  
      if (result.length === 0) {
        return { error: "Notification not found or unauthorized" };
      }
  
      return {
        success: true,
        notification: result[0],
      };
    } catch (error) {
      return { error: "Failed to mark notification as read" };
    }
  }
  async function handler({
    page = 1,
    limit = 10,
    type,
    read,
    sortBy = "created_at",
    sortOrder = "desc",
  }) {
    const session = getSession();
  
    if (!session?.user?.id) {
      return { error: "Not authenticated" };
    }
  
    const offset = (page - 1) * limit;
    let queryParts = ["SELECT * FROM notifications WHERE user_id = $1"];
    let values = [session.user.id];
    let paramCount = 1;
  
    if (type) {
      paramCount++;
      queryParts.push(`AND type = $${paramCount}`);
      values.push(type);
    }
  
    if (typeof read === "boolean") {
      paramCount++;
      queryParts.push(`AND read = $${paramCount}`);
      values.push(read);
    }
  
    queryParts.push(`ORDER BY ${sortBy} ${sortOrder.toUpperCase()}`);
  
    paramCount++;
    queryParts.push(`LIMIT $${paramCount}`);
    values.push(limit);
  
    paramCount++;
    queryParts.push(`OFFSET $${paramCount}`);
    values.push(offset);
  
    try {
      const [notifications, countResult] = await sql.transaction([
        sql(queryParts.join(" "), values),
        sql("SELECT COUNT(*) FROM notifications WHERE user_id = $1", [
          session.user.id,
        ]),
      ]);
  
      const totalCount = parseInt(countResult[0].count);
      const totalPages = Math.ceil(totalCount / limit);
  
      return {
        notifications,
        pagination: {
          currentPage: page,
          totalPages,
          totalItems: totalCount,
          itemsPerPage: limit,
        },
      };
    } catch (error) {
      return { error: "Failed to fetch notifications" };
    }
  }
  async function handler({ name, email, notificationPreferences }) {
    const session = getSession();
  
    if (!session?.user?.id) {
      return { error: "Not authenticated" };
    }
  
    try {
      const updatedUser = await sql`
        UPDATE auth_users 
        SET 
          name = COALESCE(${name}, name),
          email = COALESCE(${email}, email),
          notification_preferences = COALESCE(${
            notificationPreferences
              ? JSON.stringify(notificationPreferences)
              : null
          }, notification_preferences)
        WHERE id = ${session.user.id}
        RETURNING *
      `;
  
      if (updatedUser.length === 0) {
        return { error: "User not found" };
      }
  
      return {
        success: true,
        user: {
          id: updatedUser[0].id,
          name: updatedUser[0].name,
          email: updatedUser[0].email,
          notificationPreferences: updatedUser[0].notification_preferences,
        },
      };
    } catch (error) {
      return { error: "Failed to update profile" };
    }
  }
  async function handler({ account_id }) {
    const session = getSession();
    if (!session?.user?.id) {
      return { error: "Unauthorized" };
    }
  
    if (!account_id) {
      return { error: "Account ID is required" };
    }
  
    try {
      const [accountCount] = await sql`
        SELECT COUNT(*) as count 
        FROM banking_details 
        WHERE user_id = ${session.user.id}
      `;
  
      if (accountCount.count <= 1) {
        return { error: "Cannot delete the only bank account" };
      }
  
      const [accountToDelete] = await sql`
        SELECT is_default 
        FROM banking_details 
        WHERE id = ${account_id} 
        AND user_id = ${session.user.id}
      `;
  
      if (!accountToDelete) {
        return { error: "Bank account not found" };
      }
  
      await sql.transaction(async (sql) => [
        sql`DELETE FROM banking_details 
            WHERE id = ${account_id} 
            AND user_id = ${session.user.id}`,
  
        accountToDelete.is_default
          ? sql`UPDATE banking_details 
              SET is_default = true 
              WHERE user_id = ${session.user.id} 
              ORDER BY created_at DESC 
              LIMIT 1`
          : sql`SELECT 1`,
      ]);
  
      return {
        success: true,
        message: "Bank account deleted successfully",
      };
    } catch (error) {
      return { error: "Failed to delete bank account" };
    }
  }
  async function handler({
    account_id,
    account_holder_name,
    bank_name,
    account_number,
    routing_number,
    account_type,
    is_default,
  }) {
    const session = getSession();
    if (!session?.user?.id) {
      return { error: "Unauthorized" };
    }
  
    if (!account_id) {
      return { error: "Account ID is required" };
    }
  
    try {
      const [existingAccount] = await sql`
        SELECT * FROM banking_details 
        WHERE id = ${account_id} AND user_id = ${session.user.id}
      `;
  
      if (!existingAccount) {
        return { error: "Bank account not found" };
      }
  
      const updates = [];
      const values = [];
      let paramCount = 1;
  
      if (account_holder_name) {
        updates.push(`account_holder_name = $${paramCount}`);
        values.push(account_holder_name);
        paramCount++;
      }
  
      if (bank_name) {
        updates.push(`bank_name = $${paramCount}`);
        values.push(bank_name);
        paramCount++;
      }
  
      if (account_number) {
        if (!/^\d{8,17}$/.test(account_number)) {
          return { error: "Invalid account number format" };
        }
        updates.push(`account_number = $${paramCount}`);
        values.push(account_number);
        paramCount++;
      }
  
      if (routing_number) {
        if (!/^\d{9}$/.test(routing_number)) {
          return { error: "Invalid routing number format" };
        }
        updates.push(`routing_number = $${paramCount}`);
        values.push(routing_number);
        paramCount++;
      }
  
      if (account_type) {
        updates.push(`account_type = $${paramCount}`);
        values.push(account_type);
        paramCount++;
      }
  
      if (typeof is_default === "boolean") {
        if (is_default) {
          await sql`
            UPDATE banking_details 
            SET is_default = false 
            WHERE user_id = ${session.user.id}
          `;
        }
        updates.push(`is_default = $${paramCount}`);
        values.push(is_default);
        paramCount++;
      }
  
      if (updates.length === 0) {
        return { error: "No updates provided" };
      }
  
      const updateQuery = `
        UPDATE banking_details 
        SET ${updates.join(", ")} 
        WHERE id = $${paramCount} AND user_id = $${paramCount + 1}
        RETURNING id, account_holder_name, bank_name, account_type, is_default,
          CONCAT('****', RIGHT(account_number, 4)) as masked_account_number,
          CONCAT('****', RIGHT(routing_number, 4)) as masked_routing_number
      `;
  
      values.push(account_id, session.user.id);
  
      const [updatedAccount] = await sql(updateQuery, values);
  
      return {
        success: true,
        account: updatedAccount,
      };
    } catch (error) {
      if (error.code === "23505") {
        return { error: "This account number is already registered" };
      }
      return { error: "Failed to update bank account" };
    }
  }
  async function handler() {
    const session = getSession();
    if (!session?.user?.id) {
      return { error: "Unauthorized" };
    }
  
    try {
      const accounts = await sql`
        SELECT 
          id,
          account_holder_name,
          bank_name,
          CONCAT('****', RIGHT(account_number, 4)) as masked_account_number,
          CONCAT('****', RIGHT(routing_number, 4)) as masked_routing_number,
          account_type,
          is_default,
          created_at
        FROM banking_details 
        WHERE user_id = ${session.user.id}
        ORDER BY is_default DESC, created_at DESC
      `;
  
      return {
        success: true,
        accounts,
      };
    } catch (error) {
      return { error: "Failed to fetch bank accounts" };
    }
  }
  async function handler({
    account_holder_name,
    bank_name,
    account_number,
    routing_number,
    account_type,
    is_default,
  }) {
    const session = getSession();
    if (!session?.user?.id) {
      return { error: "Unauthorized" };
    }
  
    if (
      !account_holder_name ||
      !bank_name ||
      !account_number ||
      !routing_number ||
      !account_type
    ) {
      return { error: "Missing required fields" };
    }
  
    if (!/^\d{9}$/.test(routing_number)) {
      return { error: "Invalid routing number format" };
    }
  
    if (!/^\d{4,17}$/.test(account_number)) {
      return { error: "Invalid account number format" };
    }
  
    try {
      const [existingAccount] = await sql`
        SELECT id FROM banking_details 
        WHERE user_id = ${session.user.id}
        LIMIT 1
      `;
  
      if (existingAccount) {
        const [updatedAccount] = await sql`
          UPDATE banking_details 
          SET 
            account_holder_name = ${account_holder_name},
            bank_name = ${bank_name},
            account_number = ${account_number},
            routing_number = ${routing_number},
            account_type = ${account_type},
            is_default = ${!!is_default}
          WHERE user_id = ${session.user.id}
          RETURNING id
        `;
  
        return {
          success: true,
          account_id: updatedAccount.id,
          message: "Bank account updated successfully",
        };
      }
  
      const [newAccount] = await sql`
        INSERT INTO banking_details (
          user_id,
          account_holder_name,
          bank_name, 
          account_number,
          routing_number,
          account_type,
          is_default
        )
        VALUES (
          ${session.user.id},
          ${account_holder_name},
          ${bank_name},
          ${account_number},
          ${routing_number},
          ${account_type},
          ${!!is_default}
        )
        RETURNING id
      `;
  
      return {
        success: true,
        account_id: newAccount.id,
        message: "Bank account added successfully",
      };
    } catch (error) {
      return { error: "Failed to process bank account" };
    }
  }
  async function handler() {
    const session = getSession();
    if (!session?.user?.id) {
      return { error: "Unauthorized" };
    }
  
    try {
      const [
        marketAnalytics,
        domainPerformance,
        priceElasticity,
        competitivePricing,
      ] = await sql.transaction([
        sql`
          SELECT category, avg_sale_price, demand_score, trend_direction
          FROM domain_market_analytics
          WHERE updated_at >= NOW() - INTERVAL '30 days'
        `,
  
        sql`
          SELECT 
            d.id,
            d.name,
            d.extension,
            d.price_paid,
            d.market_value_estimate,
            COUNT(dt.id) as transaction_count,
            AVG(dt.amount) as avg_transaction_amount
          FROM domains d
          LEFT JOIN domain_transactions dt ON d.id = dt.domain_id
          WHERE d.status = 'active'
          GROUP BY d.id
        `,
  
        sql`
          SELECT 
            d.extension,
            CORR(dt.amount, COUNT(*) OVER (PARTITION BY DATE_TRUNC('month', dt.transaction_date))) as price_elasticity
          FROM domain_transactions dt
          JOIN domains d ON dt.domain_id = d.id
          WHERE dt.transaction_date >= NOW() - INTERVAL '90 days'
          GROUP BY d.extension
        `,
  
        sql`
          SELECT 
            extension,
            AVG(price_paid) as avg_market_price,
            PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price_paid) as lower_quartile,
            PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price_paid) as upper_quartile
          FROM domains
          WHERE status = 'active'
          GROUP BY extension
        `,
      ]);
  
      const priceRecommendations = domainPerformance.map((domain) => {
        const marketData = marketAnalytics.find((m) =>
          domain.name.includes(m.category)
        );
        const elasticity = priceElasticity.find(
          (e) => e.extension === domain.extension
        );
        const competitive = competitivePricing.find(
          (c) => c.extension === domain.extension
        );
  
        let recommendedPrice = domain.price_paid;
        let reason = [];
  
        if (marketData?.demand_score > 7) {
          recommendedPrice *= 1.15;
          reason.push("High market demand");
        }
  
        if (marketData?.trend_direction === "upward") {
          recommendedPrice *= 1.1;
          reason.push("Positive market trend");
        }
  
        if (domain.price_paid < competitive?.lower_quartile) {
          recommendedPrice = competitive.avg_market_price;
          reason.push("Currently underpriced");
        }
  
        if (elasticity?.price_elasticity > 0) {
          recommendedPrice *= 1.05;
          reason.push("Low price sensitivity");
        }
  
        return {
          domainId: domain.id,
          domainName: domain.name,
          currentPrice: domain.price_paid,
          recommendedPrice: Math.round(recommendedPrice * 100) / 100,
          priceChange:
            Math.round((recommendedPrice - domain.price_paid) * 100) / 100,
          reasons: reason,
          confidence: reason.length > 2 ? "High" : "Medium",
        };
      });
  
      return {
        marketAnalysis: marketAnalytics,
        priceElasticityData: priceElasticity,
        competitiveAnalysis: competitivePricing,
        recommendations: priceRecommendations.sort(
          (a, b) => b.priceChange - a.priceChange
        ),
        generatedAt: new Date().toISOString(),
      };
    } catch (error) {
      return {
        error: "Failed to optimize pricing",
        details: error.message,
      };
    }
  }
  async function handler() {
    const session = getSession();
    if (!session?.user?.id) {
      return { error: "Unauthorized" };
    }
  
    try {
      const [
        extensionProfits,
        pricePointAnalysis,
        customerSegments,
        categoryTrends,
      ] = await sql.transaction([
        sql`
          SELECT 
            d.extension,
            COUNT(*) as total_sales,
            SUM(dt.profit) as total_profit,
            AVG(dt.profit) as avg_profit
          FROM domain_transactions dt
          JOIN domains d ON dt.domain_id = d.id
          WHERE dt.status = 'completed'
          GROUP BY d.extension
          ORDER BY total_profit DESC
        `,
  
        sql`
          SELECT 
            ROUND(dt.amount, -1) as price_point,
            COUNT(*) as sales_count,
            SUM(dt.profit) as total_profit,
            AVG(dt.profit) as avg_profit
          FROM domain_transactions dt
          WHERE dt.status = 'completed'
          GROUP BY ROUND(dt.amount, -1)
          ORDER BY total_profit DESC
        `,
  
        sql`
          SELECT 
            cs.spending_tier,
            COUNT(DISTINCT cs.user_id) as customer_count,
            AVG(dt.amount) as avg_transaction_value,
            SUM(dt.profit) as total_profit
          FROM customer_segments cs
          LEFT JOIN domain_transactions dt ON cs.user_id = dt.user_id
          GROUP BY cs.spending_tier
        `,
  
        sql`
          SELECT 
            dma.category,
            dma.avg_sale_price,
            dma.demand_score,
            dma.trend_direction,
            COUNT(dt.id) as transaction_count,
            SUM(dt.profit) as category_profit
          FROM domain_market_analytics dma
          LEFT JOIN domain_transactions dt ON dt.domain_id IN (
            SELECT id FROM domains WHERE status = 'active'
          )
          GROUP BY dma.category, dma.avg_sale_price, dma.demand_score, dma.trend_direction
          ORDER BY category_profit DESC
        `,
      ]);
  
      const revenueProjection = extensionProfits.reduce(
        (acc, ext) => acc + ext.avg_profit * ext.total_sales * 1.1,
        0
      );
  
      return {
        mostProfitableExtensions: extensionProfits,
        pricePointPerformance: pricePointAnalysis,
        customerSegmentAnalysis: customerSegments,
        projectedRevenue: revenueProjection,
        categoryTrendAnalysis: categoryTrends,
        generatedAt: new Date().toISOString(),
      };
    } catch (error) {
      return {
        error: "Failed to generate profit report",
        details: error.message,
      };
    }
  }
  async function handler({ extension }) {
    if (!extension) {
      return { error: "Extension is required" };
    }
  
    try {
      const breakdown = await sql`
        SELECT * FROM domain_price_breakdown 
        WHERE extension = ${extension}
      `;
  
      if (!breakdown.length) {
        return { error: "Price breakdown not found for this extension" };
      }
  
      return {
        breakdown: breakdown[0],
      };
    } catch (error) {
      return { error: "Failed to fetch price breakdown" };
    }
  }
  async function handler({ startDate, endDate, reportType }) {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      if (reportType === "admin") {
        const adminCheck = await sql`
          SELECT is_admin FROM auth_users WHERE id = ${session.user.id}
        `;
        if (!adminCheck[0]?.is_admin) {
          return { error: "Admin access required" };
        }
      }
  
      let reportData;
      if (reportType === "user") {
        reportData = await sql`
          SELECT 
            dt.*,
            d.name as domain_name,
            d.extension as domain_extension,
            pm.card_brand,
            pm.last_four
          FROM domain_transactions dt
          LEFT JOIN domains d ON dt.domain_id = d.id
          LEFT JOIN payment_methods pm ON dt.payment_method_id = pm.id
          WHERE dt.user_id = ${session.user.id} 
          AND dt.transaction_date BETWEEN ${startDate} AND ${endDate}
          ORDER BY dt.transaction_date DESC
        `;
      } else if (reportType === "admin") {
        reportData = await sql`
          SELECT 
            DATE(dt.transaction_date) as date,
            COUNT(*) as total_transactions,
            SUM(dt.amount) as total_amount,
            COUNT(CASE WHEN dt.status = 'completed' THEN 1 END) as successful_transactions,
            COUNT(CASE WHEN dt.status = 'failed' THEN 1 END) as failed_transactions,
            AVG(EXTRACT(EPOCH FROM (
              CASE WHEN dt.status = 'completed' 
              THEN dt.updated_at - dt.transaction_date 
              END
            ))) as avg_processing_time_seconds
          FROM domain_transactions dt
          WHERE dt.transaction_date BETWEEN ${startDate} AND ${endDate}
          GROUP BY DATE(dt.transaction_date)
          ORDER BY DATE(dt.transaction_date)
        `;
      }
  
      const report = await sql`
        INSERT INTO payment_reports (
          user_id, 
          report_type, 
          date_range_start, 
          date_range_end, 
          report_data
        )
        VALUES (
          ${session.user.id}, 
          ${reportType}, 
          ${startDate}, 
          ${endDate}, 
          ${JSON.stringify(reportData)}
        )
        RETURNING *
      `;
  
      return {
        reportId: report[0].id,
        data: reportData,
      };
    } catch (error) {
      return { error: "Failed to generate payment report" };
    }
  }
  async function handler({ domainName }) {
    if (!domainName) {
      return { error: "Domain name is required" };
    }
  
    try {
      // Get base pricing data for common extensions
      const extensionPrices = await sql`
        SELECT extension, selling_price, market_value_estimate 
        FROM domain_price_breakdown 
        WHERE extension IN ('.com', '.net', '.org')
      `;
  
      // Get market trends
      const marketTrends = await sql`
        SELECT category, avg_sale_price, demand_score, trend_direction 
        FROM domain_market_analytics 
        WHERE updated_at > NOW() - INTERVAL '30 days'
      `;
  
      // Get recent sales data
      const recentSales = await sql`
        SELECT dt.amount, d.name, d.extension
        FROM domain_transactions dt
        JOIN domains d ON dt.domain_id = d.id
        WHERE dt.transaction_date > NOW() - INTERVAL '90 days'
        AND dt.status = 'completed'
        ORDER BY dt.transaction_date DESC
        LIMIT 50
      `;
  
      // Calculate base value factors
      const length = domainName.length;
      const hasHyphen = domainName.includes("-");
      const hasNumber = /\d/.test(domainName);
      const isAllLetters = /^[a-zA-Z]+$/.test(domainName);
  
      // Length factor (shorter domains are typically more valuable)
      const lengthFactor = Math.max(0.5, (10 - length) / 5);
  
      // Quality factors
      const qualityMultiplier =
        (isAllLetters ? 1.2 : 1.0) *
        (hasHyphen ? 0.8 : 1.0) *
        (hasNumber ? 0.9 : 1.0);
  
      // Calculate average market prices
      const avgMarketPrice =
        marketTrends.reduce(
          (sum, trend) => sum + Number(trend.avg_sale_price),
          0
        ) / marketTrends.length;
  
      // Calculate average recent sale price
      const avgRecentSale =
        recentSales.reduce((sum, sale) => sum + Number(sale.amount), 0) /
        recentSales.length;
  
      // Calculate base value for each extension
      const valuations = extensionPrices.map((ext) => {
        const basePrice = Number(ext.selling_price);
        const marketValue = Number(ext.market_value_estimate) || basePrice;
  
        const estimatedValue =
          basePrice *
          lengthFactor *
          qualityMultiplier *
          (marketValue / basePrice) *
          (avgRecentSale / avgMarketPrice);
  
        return {
          extension: ext.extension,
          estimatedValue: Math.round(estimatedValue * 100) / 100,
          confidence: calculateConfidence(
            length,
            qualityMultiplier,
            marketTrends
          ),
        };
      });
  
      return {
        domainName,
        factors: {
          length,
          lengthScore: lengthFactor,
          qualityScore: qualityMultiplier,
          marketTrend: marketTrends[0]?.trend_direction || "stable",
          avgMarketPrice,
          avgRecentSale,
        },
        valuations,
      };
    } catch (error) {
      return { error: "Failed to estimate domain value" };
    }
  }
  
  function calculateConfidence(length, quality, marketTrends) {
    const lengthConfidence = length >= 3 && length <= 15 ? 1 : 0.7;
    const qualityConfidence = quality >= 1 ? 1 : 0.8;
    const marketConfidence = marketTrends.length > 0 ? 1 : 0.6;
  
    const overallConfidence =
      (lengthConfidence + qualityConfidence + marketConfidence) / 3;
    return Math.round(overallConfidence * 100);
  }
  async function handler() {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      const notifications = await sql`
        SELECT * FROM notifications 
        WHERE user_id = ${session.user.id} 
        ORDER BY created_at DESC 
        LIMIT 50
      `;
  
      return { notifications };
    } catch (error) {
      return { error: "Failed to fetch notifications" };
    }
  }
  async function handler({ startDate, endDate, groupBy = "month" }) {
    if (!startDate || !endDate) {
      return {
        error: "Start date and end date are required",
      };
    }
  
    try {
      const query = `
        SELECT 
          d.extension,
          dt.transaction_date,
          SUM(dt.amount) as revenue,
          SUM(dt.registry_fee) as total_registry_fees,
          SUM(dt.icann_fee) as total_icann_fees,
          SUM(dt.our_cost) as total_costs,
          SUM(dt.profit) as total_profit,
          COUNT(*) as transaction_count,
          date_trunc($1, dt.transaction_date) as period
        FROM domain_transactions dt
        JOIN domains d ON dt.domain_id = d.id
        WHERE dt.transaction_date BETWEEN $2 AND $3
        AND dt.status = 'completed'
        GROUP BY d.extension, date_trunc($1, dt.transaction_date)
        ORDER BY period DESC, d.extension
      `;
  
      const results = await sql(query, [groupBy, startDate, endDate]);
  
      // Calculate overall totals
      const totals = {
        revenue: 0,
        costs: 0,
        profit: 0,
        transactions: 0,
      };
  
      // Process results by period and extension
      const reportByPeriod = {};
  
      results.forEach((row) => {
        const period = row.period.toISOString().split("T")[0];
        const extension = row.extension;
  
        if (!reportByPeriod[period]) {
          reportByPeriod[period] = {
            extensions: {},
            periodTotals: {
              revenue: 0,
              costs: 0,
              profit: 0,
              transactions: 0,
            },
          };
        }
  
        const extensionData = {
          revenue: Number(row.revenue),
          registryFees: Number(row.total_registry_fees),
          icannFees: Number(row.total_icann_fees),
          operationalCosts: Number(row.total_costs),
          profit: Number(row.total_profit),
          transactions: Number(row.transaction_count),
          margin: (
            (Number(row.total_profit) / Number(row.revenue)) *
            100
          ).toFixed(2),
        };
  
        reportByPeriod[period].extensions[extension] = extensionData;
  
        // Update period totals
        reportByPeriod[period].periodTotals.revenue += extensionData.revenue;
        reportByPeriod[period].periodTotals.costs +=
          extensionData.registryFees +
          extensionData.icannFees +
          extensionData.operationalCosts;
        reportByPeriod[period].periodTotals.profit += extensionData.profit;
        reportByPeriod[period].periodTotals.transactions +=
          extensionData.transactions;
  
        // Update overall totals
        totals.revenue += extensionData.revenue;
        totals.costs +=
          extensionData.registryFees +
          extensionData.icannFees +
          extensionData.operationalCosts;
        totals.profit += extensionData.profit;
        totals.transactions += extensionData.transactions;
      });
  
      return {
        summary: {
          totalRevenue: totals.revenue,
          totalCosts: totals.costs,
          totalProfit: totals.profit,
          totalTransactions: totals.transactions,
          overallMargin: ((totals.profit / totals.revenue) * 100).toFixed(2),
          startDate,
          endDate,
          groupBy,
        },
        detailedReport: reportByPeriod,
      };
    } catch (error) {
      return {
        error: "Failed to generate profit report",
      };
    }
  }
  async function handler() {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    try {
      const paymentMethods = await sql`
        SELECT 
          id,
          card_brand,
          last_four,
          expiry_month,
          expiry_year,
          is_default
        FROM payment_methods 
        WHERE user_id = ${session.user.id}
        ORDER BY is_default DESC, id DESC
      `;
  
      return {
        success: true,
        paymentMethods,
      };
    } catch (error) {
      return {
        success: false,
        error: "Failed to fetch payment methods",
      };
    }
  }
  async function handler({ domainName, extension, paymentMethodId }) {
    const session = getSession();
    if (!session?.user) {
      return { error: "Authentication required" };
    }
  
    if (!domainName || !extension || !paymentMethodId) {
      return { error: "Missing required fields" };
    }
  
    try {
      const paymentMethod = await sql`
        SELECT * FROM payment_methods 
        WHERE id = ${paymentMethodId} 
        AND user_id = ${session.user.id}
      `;
  
      if (!paymentMethod.length) {
        return { error: "Invalid payment method" };
      }
  
      const existingDomain = await sql`
        SELECT * FROM domains 
        WHERE name = ${domainName} 
        AND extension = ${extension}
      `;
  
      if (existingDomain.length) {
        return { error: "Domain is not available" };
      }
  
      const domainPrice = 10.0; // Replace with actual price calculation
  
      return await sql.transaction(async (sql) => {
        const domain = await sql`
          INSERT INTO domains (
            name,
            extension,
            user_id,
            expiry_date,
            price_paid
          ) VALUES (
            ${domainName},
            ${extension},
            ${session.user.id},
            ${new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)},
            ${domainPrice}
          ) RETURNING *
        `;
  
        await sql`
          INSERT INTO domain_transactions (
            domain_id,
            user_id,
            amount,
            transaction_type,
            payment_method,
            status
          ) VALUES (
            ${domain[0].id},
            ${session.user.id},
            ${domainPrice},
            'registration',
            ${paymentMethod[0].card_brand},
            'completed'
          )
        `;
  
        return { success: true, domain: domain[0] };
      });
    } catch (error) {
      return { error: error.message };
    }
  }
  "use client";
import React from "react";

function MainComponent() {
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const { signInWithCredentials } = useAuth();

  const onSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    if (!email || !password) {
      setError("Please fill in all fields");
      setLoading(false);
      return;
    }

    try {
      await signInWithCredentials({
        email,
        password,
        callbackUrl: "/",
        redirect: true,
      });
    } catch (err) {
      const errorMessages = {
        OAuthSignin:
          "Couldn’t start sign-in. Please try again or use a different method.",
        OAuthCallback: "Sign-in failed after redirecting. Please try again.",
        OAuthCreateAccount:
          "Couldn’t create an account with this sign-in method. Try another option.",
        EmailCreateAccount:
          "This email can’t be used to create an account. It may already exist.",
        Callback: "Something went wrong during sign-in. Please try again.",
        OAuthAccountNotLinked:
          "This account is linked to a different sign-in method. Try using that instead.",
        CredentialsSignin:
          "Incorrect email or password. Try again or reset your password.",
        AccessDenied: "You don’t have permission to sign in.",
        Configuration:
          "Sign-in isn’t working right now. Please try again later.",
        Verification: "Your sign-in link has expired. Request a new one.",
      };

      setError(
        errorMessages[err.message] || "Something went wrong. Please try again."
      );
      setLoading(false);
    }
  };

  const PasswordInput = ({ newUser }) => {
    return (
      <input
        required
        name="password"
        type="password"
        className="w-full rounded-lg bg-transparent text-lg outline-none"
        placeholder="Enter your password"
      />
    );
  };

  return (
    <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-50 p-4">
      <form
        noValidate
        onSubmit={onSubmit}
        className="w-full max-w-md rounded-2xl bg-white p-8 shadow-xl"
      >
        <h1 className="mb-8 text-center text-3xl font-bold text-gray-800">
          Welcome Back
        </h1>

        <div className="space-y-6">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Email
            </label>
            <div className="overflow-hidden rounded-lg border border-gray-200 bg-white px-4 py-3 focus-within:border-[#357AFF] focus-within:ring-1 focus-within:ring-[#357AFF]">
              <input
                required
                name="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
                className="w-full bg-transparent text-lg outline-none"
              />
            </div>
          </div>
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <div className="overflow-hidden rounded-lg border border-gray-200 bg-white px-4 py-3 focus-within:border-[#357AFF] focus-within:ring-1 focus-within:ring-[#357AFF]">
              <input
                required
                name="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full rounded-lg bg-transparent text-lg outline-none"
                placeholder="Enter your password"
              />
            </div>
          </div>

          {error && (
            <div className="rounded-lg bg-red-50 p-3 text-sm text-red-500">
              {error}
            </div>
          )}

          <button
            type="submit"
            disabled={loading}
            className="w-full rounded-lg bg-[#357AFF] px-4 py-3 text-base font-medium text-white transition-colors hover:bg-[#2E69DE] focus:outline-none focus:ring-2 focus:ring-[#357AFF] focus:ring-offset-2 disabled:opacity-50"
          >
            {loading ? "Loading..." : "Sign In"}
          </button>
          <p className="text-center text-sm text-gray-600">
            Don't have an account?{" "}
            <a
              href="/account/signup"
              className="text-[#357AFF] hover:text-[#2E69DE]"
            >
              Sign up
            </a>
          </p>
        </div>
      </form>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const { signUpWithCredentials } = useAuth();

  const onSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    if (!email || !password) {
      setError("Please fill in all fields");
      setLoading(false);
      return;
    }

    try {
      await signUpWithCredentials({
        email,
        password,
        callbackUrl: "/",
        redirect: true,
      });
    } catch (err) {
      const errorMessages = {
        OAuthSignin:
          "Couldn’t start sign-up. Please try again or use a different method.",
        OAuthCallback: "Sign-up failed after redirecting. Please try again.",
        OAuthCreateAccount:
          "Couldn’t create an account with this sign-up option. Try another one.",
        EmailCreateAccount:
          "This email can’t be used. It may already be registered.",
        Callback: "Something went wrong during sign-up. Please try again.",
        OAuthAccountNotLinked:
          "This account is linked to a different sign-in method. Try using that instead.",
        CredentialsSignin:
          "Invalid email or password. If you already have an account, try signing in instead.",
        AccessDenied: "You don’t have permission to sign up.",
        Configuration:
          "Sign-up isn’t working right now. Please try again later.",
        Verification: "Your sign-up link has expired. Request a new one.",
      };

      setError(
        errorMessages[err.message] || "Something went wrong. Please try again."
      );
      setLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-50 p-4">
      <form
        noValidate
        onSubmit={onSubmit}
        className="w-full max-w-md rounded-2xl bg-white p-8 shadow-xl"
      >
        <h1 className="mb-8 text-center text-3xl font-bold text-gray-800">
          Create Account
        </h1>

        <div className="space-y-6">
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Email
            </label>
            <div className="overflow-hidden rounded-lg border border-gray-200 bg-white px-4 py-3 focus-within:border-[#357AFF] focus-within:ring-1 focus-within:ring-[#357AFF]">
              <input
                required
                name="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
                className="w-full bg-transparent text-lg outline-none"
              />
            </div>
          </div>
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-700">
              Password
            </label>
            <div className="overflow-hidden rounded-lg border border-gray-200 bg-white px-4 py-3 focus-within:border-[#357AFF] focus-within:ring-1 focus-within:ring-[#357AFF]">
              <input
                required
                name="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full rounded-lg bg-transparent text-lg outline-none"
                placeholder="Enter your password"
              />
            </div>
          </div>

          {error && (
            <div className="rounded-lg bg-red-50 p-3 text-sm text-red-500">
              {error}
            </div>
          )}

          <button
            type="submit"
            disabled={loading}
            className="w-full rounded-lg bg-[#357AFF] px-4 py-3 text-base font-medium text-white transition-colors hover:bg-[#2E69DE] focus:outline-none focus:ring-2 focus:ring-[#357AFF] focus:ring-offset-2 disabled:opacity-50"
          >
            {loading ? "Loading..." : "Sign Up"}
          </button>
          <p className="text-center text-sm text-gray-600">
            Already have an account?{" "}
            <a
              href="/account/signin"
              className="text-[#357AFF] hover:text-[#2E69DE]"
            >
              Sign in
            </a>
          </p>
        </div>
      </form>
    </div>
  );
}

export default MainComponent;
"use client";
import React from "react";

function MainComponent() {
  const handleSignOut = async () => {
    await signOut({
      callbackUrl: "/",
      redirect: true,
    });
  };
  return (
    <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-50 p-4">
      <div className="w-full max-w-md rounded-2xl bg-white p-8 shadow-xl">
        <h1 className="mb-8 text-center text-3xl font-bold text-gray-800">
          Sign Out
        </h1>

        <button
          onClick={handleSignOut}
          className="w-full rounded-lg bg-[#357AFF] px-4 py-3 text-base font-medium text-white transition-colors hover:bg-[#2E69DE] focus:outline-none focus:ring-2 focus:ring-[#357AFF] focus:ring-offset-2 disabled:opacity-50"
        >
          Sign Out
        </button>
      </div>
    </div>
  );
}
